{"ast":null,"code":"var _jsxFileName = \"/Users/irinaabakumova/Downloads/Laba/frontend/src/Components/GetMaxDateCityButton.tsx\";\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetMaxDateCityButton = ({\n  onCityUpdate\n}) => {\n  const handleButtonClick = async () => {\n    try {\n      var _xmlDoc$getElementsBy, _xmlDoc$getElementsBy2, _xmlDoc$getElementsBy3, _xmlDoc$getElementsBy4, _xmlDoc$getElementsBy5, _xmlDoc$getElementsBy6, _xmlDoc$getElementsBy7, _xmlDoc$getElementsBy8, _xmlDoc$getElementsBy9, _xmlDoc$getElementsBy10, _xmlDoc$getElementsBy11, _xmlDoc$getElementsBy12;\n      const response = await fetch(`http://localhost:9991/api/external/max/establishment-date`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await response.text();\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\n      const city = {\n        id: ((_xmlDoc$getElementsBy = xmlDoc.getElementsByTagName(\"id\")[0]) === null || _xmlDoc$getElementsBy === void 0 ? void 0 : _xmlDoc$getElementsBy.textContent) || '',\n        name: ((_xmlDoc$getElementsBy2 = xmlDoc.getElementsByTagName(\"name\")[0]) === null || _xmlDoc$getElementsBy2 === void 0 ? void 0 : _xmlDoc$getElementsBy2.textContent) || '',\n        coordinates: {\n          x: ((_xmlDoc$getElementsBy3 = xmlDoc.getElementsByTagName(\"x\")[0]) === null || _xmlDoc$getElementsBy3 === void 0 ? void 0 : _xmlDoc$getElementsBy3.textContent) || '0',\n          y: ((_xmlDoc$getElementsBy4 = xmlDoc.getElementsByTagName(\"y\")[0]) === null || _xmlDoc$getElementsBy4 === void 0 ? void 0 : _xmlDoc$getElementsBy4.textContent) || '0'\n        },\n        creationDate: new Date(xmlDoc.getElementsByTagName(\"creationDate\")[0].textContent || 0),\n        area: ((_xmlDoc$getElementsBy5 = xmlDoc.getElementsByTagName(\"area\")[0]) === null || _xmlDoc$getElementsBy5 === void 0 ? void 0 : _xmlDoc$getElementsBy5.textContent) || '0',\n        population: ((_xmlDoc$getElementsBy6 = xmlDoc.getElementsByTagName(\"population\")[0]) === null || _xmlDoc$getElementsBy6 === void 0 ? void 0 : _xmlDoc$getElementsBy6.textContent) || '0',\n        metersAboveSeaLevel: ((_xmlDoc$getElementsBy7 = xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[0]) === null || _xmlDoc$getElementsBy7 === void 0 ? void 0 : _xmlDoc$getElementsBy7.textContent) || '0',\n        establishmentDate: new Date(((_xmlDoc$getElementsBy8 = xmlDoc.getElementsByTagName(\"establishmentDate\")[0]) === null || _xmlDoc$getElementsBy8 === void 0 ? void 0 : _xmlDoc$getElementsBy8.textContent) || 0),\n        capital: ((_xmlDoc$getElementsBy9 = xmlDoc.getElementsByTagName(\"capital\")[0]) === null || _xmlDoc$getElementsBy9 === void 0 ? void 0 : _xmlDoc$getElementsBy9.textContent) === 'true',\n        government: (_xmlDoc$getElementsBy10 = xmlDoc.getElementsByTagName(\"government\")[0]) === null || _xmlDoc$getElementsBy10 === void 0 ? void 0 : _xmlDoc$getElementsBy10.textContent,\n        governor: {\n          height: ((_xmlDoc$getElementsBy11 = xmlDoc.getElementsByTagName(\"height\")[0]) === null || _xmlDoc$getElementsBy11 === void 0 ? void 0 : _xmlDoc$getElementsBy11.textContent) || '0',\n          birthday: new Date(((_xmlDoc$getElementsBy12 = xmlDoc.getElementsByTagName(\"birthday\")[0]) === null || _xmlDoc$getElementsBy12 === void 0 ? void 0 : _xmlDoc$getElementsBy12.textContent) || 0)\n        },\n        human: Array.from(xmlDoc.getElementsByTagName(\"inhabitant\")).map(humanElement => {\n          var _humanElement$getElem, _humanElement$getElem2;\n          return {\n            height: ((_humanElement$getElem = humanElement.getElementsByTagName(\"height\")[0]) === null || _humanElement$getElem === void 0 ? void 0 : _humanElement$getElem.textContent) || '0',\n            birthday: new Date(((_humanElement$getElem2 = humanElement.getElementsByTagName(\"birthday\")[0]) === null || _humanElement$getElem2 === void 0 ? void 0 : _humanElement$getElem2.textContent) || 0)\n          };\n        })\n      };\n      onCityUpdate(city);\n    } catch (error) {\n      console.error('Error fetching city data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleButtonClick,\n      children: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 max establishment Date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = GetMaxDateCityButton;\nexport default GetMaxDateCityButton;\nvar _c;\n$RefreshReg$(_c, \"GetMaxDateCityButton\");","map":{"version":3,"names":["React","Button","Stack","jsxDEV","_jsxDEV","GetMaxDateCityButton","onCityUpdate","handleButtonClick","_xmlDoc$getElementsBy","_xmlDoc$getElementsBy2","_xmlDoc$getElementsBy3","_xmlDoc$getElementsBy4","_xmlDoc$getElementsBy5","_xmlDoc$getElementsBy6","_xmlDoc$getElementsBy7","_xmlDoc$getElementsBy8","_xmlDoc$getElementsBy9","_xmlDoc$getElementsBy10","_xmlDoc$getElementsBy11","_xmlDoc$getElementsBy12","response","fetch","ok","Error","xmlText","text","parser","DOMParser","xmlDoc","parseFromString","city","id","getElementsByTagName","textContent","name","coordinates","x","y","creationDate","Date","area","population","metersAboveSeaLevel","establishmentDate","capital","government","governor","height","birthday","human","Array","from","map","humanElement","_humanElement$getElem","_humanElement$getElem2","error","console","direction","spacing","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaabakumova/Downloads/Laba/frontend/src/Components/GetMaxDateCityButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { City } from '../models/City';\nimport { Government } from '../models/Government'; \n\ninterface ButtonsProps {\n  onCityUpdate: (city: City) => void; \n}\n\nconst GetMaxDateCityButton: React.FC<ButtonsProps> = ({onCityUpdate }) => {\n  const handleButtonClick = async () => {\n    try {\n      const response = await fetch(`http://localhost:9991/api/external/max/establishment-date`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await response.text(); \n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\"); \n\n      const city: City = {\n        id: xmlDoc.getElementsByTagName(\"id\")[0]?.textContent || '',\n        name: xmlDoc.getElementsByTagName(\"name\")[0]?.textContent || '',\n        coordinates: {\n          x: xmlDoc.getElementsByTagName(\"x\")[0]?.textContent || '0',\n          y: xmlDoc.getElementsByTagName(\"y\")[0]?.textContent || '0',\n        },\n        creationDate: new Date(xmlDoc.getElementsByTagName(\"creationDate\")[0].textContent || 0),\n        area: xmlDoc.getElementsByTagName(\"area\")[0]?.textContent || '0',\n        population: xmlDoc.getElementsByTagName(\"population\")[0]?.textContent || '0',\n        metersAboveSeaLevel: xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[0]?.textContent || '0',\n        establishmentDate: new Date(xmlDoc.getElementsByTagName(\"establishmentDate\")[0]?.textContent || 0),\n        capital: xmlDoc.getElementsByTagName(\"capital\")[0]?.textContent === 'true',\n        government: xmlDoc.getElementsByTagName(\"government\")[0]?.textContent as Government,\n        governor: {\n          height: xmlDoc.getElementsByTagName(\"height\")[0]?.textContent || '0',\n          birthday: new Date(xmlDoc.getElementsByTagName(\"birthday\")[0]?.textContent || 0),\n        },\n        human: Array.from(xmlDoc.getElementsByTagName(\"inhabitant\")).map(humanElement => ({\n          height: humanElement.getElementsByTagName(\"height\")[0]?.textContent || '0',\n          birthday: new Date(humanElement.getElementsByTagName(\"birthday\")[0]?.textContent || 0),\n        })),\n      };\n\n      onCityUpdate(city);\n    } catch (error) {\n      console.error('Error fetching city data:', error);\n    }\n  };\n\n\n  return (\n    <Stack direction=\"row\" spacing={2}>\n      <Button variant=\"outlined\" onClick={handleButtonClick}>Город с max establishment Date</Button>\n    </Stack>\n  );\n}\nexport default GetMaxDateCityButton;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}