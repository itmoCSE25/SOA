{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import'../App.css';import Modal from'../Modal/modal';import Select from'react-select';import{parseStringPromise}from'xml2js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Government=/*#__PURE__*/function(Government){Government[\"DESPOTISM\"]=\"DESPOTISM\";Government[\"PATRIARCHY\"]=\"PATRIARCHY\";Government[\"ETHNOCRACY\"]=\"ETHNOCRACY\";return Government;}(Government||{});const Table=()=>{const[id,setId]=useState('');const[name,setName]=useState('');const[coordinates,setCoordinates]=useState([]);const[creationDate,setCreationDatee]=useState('');const[area,setArea]=useState('');const[population,setPopulation]=useState('');const[metersAboveSeaLevel,setMetersAboveSeaLevel]=useState('');const[establishmentDate,setEstablishmentDate]=useState('');const[capital,setCapital]=useState('');const[government,setGovernment]=useState(null);const[governor,setGovernor]=useState([]);const[x,setX]=useState('');const[y,setY]=useState('');const[height,setHeight]=useState('');const[birthday,setBirthday]=useState('');const[cityList,setCityList]=useState([]);const[CityId,setCityId]=useState('');const[GovernmentId,setGovernmentId]=useState('');const[valueGovernment,setValueGovernment]=useState('');const[modalActive,setModalActive]=useState(false);const[response,setResponse]=useState(null);const onChangeGovernment=newValue=>{setGovernment(newValue?newValue.value:null);};const governmentOptions=Object.values(Government).map(gov=>({label:gov,value:gov}));const handleKeyPress=e=>{// Запрещаем вводить всё, кроме цифр, точки и знака минус\nconst regex=/^[0-9\\.]+$/;if(!regex.test(e.key)&&e.key!=='Backspace'&&e.key!=='Delete'){e.preventDefault();}};const fetchData=async()=>{const xmlData=`\n              <request>\n                <item>\n                  <name>example</name>\n                  <value>123</value>\n                </item>\n              </request>\n            `;try{const res=await fetch('http://localhost:9991/api/city',{method:'POST',headers:{'Content-Type':'application/xml'},body:xmlData});if(!res.ok){throw new Error('Network response was not ok');}const xmlText=await res.text();const result=await parseStringPromise(xmlText);const cities=result.CitiesWithPagerDto.City;const updatedCityList=[...cityList];// Копируем текущее состояние cityList\ncities.forEach(res=>{const foundOption=updatedCityList.findIndex(a=>a.id===res.id[0]);// Извлекаем координаты\nconst coordinates={x:parseFloat(res.Coordinates[0].x[0]),y:parseFloat(res.Coordinates[0].y[0])};const newCityData={id:res.id[0],name:res.name[0],coordinates:coordinates,creationDate:res.creationDate[0],area:parseFloat(res.area[0]),population:parseInt(res.population[0]),metersAboveSeaLevel:parseFloat(res.metersAboveSeaLevel[0]),establishmentDate:res.establishmentDate[0],capital:res.capital[0]==='true',// Преобразование к boolean\ngovernment:res.government[0],governor:res.Human.map(human=>({height:parseFloat(human.height[0]),birthday:human.birthday[0]}))};if(foundOption===-1){// Добавляем новый город\nupdatedCityList.push(newCityData);}else{// Обновляем существующий город\nupdatedCityList[foundOption]={...updatedCityList[foundOption],...newCityData};}});setCityList(updatedCityList);}catch(error){let errorMessage;// Проверка типа error\nif(error instanceof Error){errorMessage=error.message;// Доступ к сообщению об ошибке\n}else{errorMessage=String(error);// Преобразуем в строку, если это не Error\n}console.error('Error:',errorMessage);setResponse(`Error: ${errorMessage}`);}};const fetchData1=async()=>{try{const response=await axios.get('http://localhost:9991/api/city',{headers:{'Access-Control-Allow-Origin':'*'}});console.log(response);setCityList(response.data.cityList);response.data.cityList.map((res,index)=>{const foundOption=cityList.findIndex(a=>a.id===res.id);if(foundOption===-1){cityList.push(res);}else{cityList[foundOption].name=res.name;cityList[foundOption].coordinates=res.coordinates;cityList[foundOption].creationDate=res.creationDate;cityList[foundOption].area=res.area;cityList[foundOption].population=res.population;cityList[foundOption].metersAboveSeaLevel=res.metersAboveSeaLevel;cityList[foundOption].capital=res.capital;cityList[foundOption].government=res.government;}setCityList(cityList);});}catch(error){console.error('Error fetching data:',error);}};useEffect(()=>{fetchData();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"body\",children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"table\",{className:\"selection\",children:/*#__PURE__*/_jsxs(\"thead\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"th\",{children:[/*#__PURE__*/_jsx(\"input\",{id:\"get_city\",placeholder:\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",type:\"number\",min:\"0\",value:CityId,onChange:e=>setCityId(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:async()=>{try{const response=await fetch(`http://localhost:9991/api/city/${CityId}`,{method:'GET',headers:{'Content-Type':'application/json'}});if(response.ok){const data=await response.json();console.log('City data:',data);return data;}else{throw new Error(`HTTP error! Status: ${response.status}`);}}catch(e){console.log('Fetching error',e);}},children:\"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 \\u043F\\u043E id\"})]}),/*#__PURE__*/_jsxs(\"th\",{children:[/*#__PURE__*/_jsx(\"input\",{id:\"delete_city\",placeholder:\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",value:CityId,type:\"number\",min:\"0\",onChange:e=>setCityId(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:async()=>{try{const response=await fetch(`http://localhost:9991/api/city/city?cityID=${CityId}`,{method:'DELETE',headers:{'Content-Type':'application/json'}});if(response.ok){delete cityList[Number({CityId})];fetchData();}else{throw new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();return data;}catch(e){console.log('Sending error',e);}},children:\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 \\u043F\\u043E id \"})]}),/*#__PURE__*/_jsxs(\"th\",{children:[/*#__PURE__*/_jsx(\"input\",{id:\"get_government\",placeholder:\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",type:\"number\",value:GovernmentId,min:\"0\",max:\"2\",onChange:e=>setGovernmentId(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:async()=>{try{const response=await fetch(`http://localhost:9991/api/external/government/${valueGovernment}`,{method:'GET',headers:{'Content-Type':'application/json'}});if(response.ok){const data=await response.json();console.log('City data:',data);return data;}else{throw new Error(`HTTP error! Status: ${response.status}`);}}catch(e){console.log('Fetching error',e);}},children:\"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 government \\u043C\\u0435\\u043D\\u044C\\u0448\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u0433\\u043E\"})]})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:()=>{setModalActive(true);},children:\"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 \\u043F\\u043E id\"})}),/*#__PURE__*/_jsx(\"th\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:async()=>{fetchData();},children:\"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430 \\u0441 \\u043F\\u0430\\u0433\\u0438\\u043D\\u0430\\u0446\\u0438\\u0435\\u0439\"})}),/*#__PURE__*/_jsx(\"th\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:async()=>{try{const response=await axios.get('http://localhost:9991/api/external/min/id',{headers:{'Access-Control-Allow-Origin':'*'}});console.log(response);setCityList(response.data.cityList);response.data.cityList.map((res,index)=>{const foundOption=cityList.findIndex(a=>a.id===res.id);if(foundOption===-1){cityList.push(res);}else{cityList[foundOption].name=res.name;cityList[foundOption].coordinates=res.coordinates;cityList[foundOption].creationDate=res.creationDate;cityList[foundOption].area=res.area;cityList[foundOption].population=res.population;cityList[foundOption].metersAboveSeaLevel=res.metersAboveSeaLevel;cityList[foundOption].capital=res.capital;cityList[foundOption].government=res.government;}setCityList(cityList);});}catch(error){console.error('Error fetching data:',error);}},children:\"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 \\u043C\\u0438\\u043D\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u044B\\u043C id\"})}),/*#__PURE__*/_jsx(\"th\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"add\",onClick:async()=>{try{const response=await axios.get('http://localhost:9991/api/external/max/establishment-date',{headers:{'Access-Control-Allow-Origin':'*'}});console.log(response);setCityList(response.data.cityList);response.data.cityList.map((res,index)=>{const foundOption=cityList.findIndex(a=>a.id===res.id);if(foundOption===-1){cityList.push(res);}else{cityList[foundOption].name=res.name;cityList[foundOption].coordinates=res.coordinates;cityList[foundOption].creationDate=res.creationDate;cityList[foundOption].area=res.area;cityList[foundOption].population=res.population;cityList[foundOption].metersAboveSeaLevel=res.metersAboveSeaLevel;cityList[foundOption].capital=res.capital;cityList[foundOption].government=res.government;}setCityList(cityList);});}catch(error){console.error('Error fetching data:',error);}},children:\"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0439 \\u0434\\u0430\\u0442\\u043E\\u0439\"})})]})]})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"table\",{className:\"flower\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u041A\\u043E\\u043E\\u0440\\u0434\\u0438\\u0430\\u043D\\u0442\\u044B\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u041F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u0438\\u0435\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u043D\\u0430\\u0434 \\u0443\\u0440\\u043E\\u0432\\u043D\\u0435\\u043C \\u043C\\u043E\\u0440\\u044F\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0422\\u0438\\u043F \\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u0441\\u0442\\u0432\\u0430\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u041C\\u044D\\u0440\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:cityList.map((city,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:city.name}),/*#__PURE__*/_jsxs(\"td\",{children:[city.coordinates.x,\";\",city.coordinates.y]}),/*#__PURE__*/_jsx(\"td\",{children:city.area}),/*#__PURE__*/_jsx(\"td\",{children:city.population}),/*#__PURE__*/_jsx(\"td\",{children:city.metersAboveSeaLevel}),/*#__PURE__*/_jsx(\"td\",{children:city.government}),/*#__PURE__*/_jsx(\"td\",{children:city.governor.height})]},city.id))})]}),/*#__PURE__*/_jsx(Modal,{active:modalActive,setActive:setModalActive,children:/*#__PURE__*/_jsxs(\"table\",{className:\"tableAdd\",children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"ID\"}),/*#__PURE__*/_jsx(\"input\",{id:\"id\",type:\"number\",value:id,pattern:\"\\\\d*\",onChange:e=>setId(e.target.value)})]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:name,onChange:e=>setName(e.target.value)})]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u041A\\u043E\\u043E\\u0440\\u0434\\u0438\\u0430\\u043D\\u0442\\u044B\"}),/*#__PURE__*/_jsx(\"input\",{id:\"x\",type:\"number\",value:x,pattern:\"\\\\d*\",onChange:e=>setX(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{id:\"y\",type:\"number\",value:y,pattern:\"\\\\d*\",onChange:e=>setY(e.target.value)})]})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u041F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C\"}),/*#__PURE__*/_jsx(\"input\",{id:\"area\",type:\"number\",value:area,pattern:\"\\\\d*\",onChange:e=>setArea(e.target.value)})]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u0438\\u0435\"}),/*#__PURE__*/_jsx(\"input\",{id:\"population\",type:\"number\",value:population,pattern:\"\\\\d*\",onChange:e=>setPopulation(e.target.value)})]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u043D\\u0430\\u0434 \\u0423\\u041C\"}),/*#__PURE__*/_jsx(\"input\",{id:\"metersAboveSeaLevel\",type:\"texnumbert\",value:metersAboveSeaLevel,pattern:\"\\\\d*\",onChange:e=>setMetersAboveSeaLevel(e.target.value)})]})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u0422\\u0438\\u043F \\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u0441\\u0442\\u0432\\u0430\"}),/*#__PURE__*/_jsx(Select,{classNamePrefix:\"select_type\",onChange:onChangeGovernment,value:governmentOptions.find(option=>option.value===government)||null,options:governmentOptions,inputValue:\"\",onInputChange:()=>{},onMenuOpen:()=>{},onMenuClose:()=>{}})]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u041C\\u044D\\u0440\"}),/*#__PURE__*/_jsx(\"input\",{id:\"height\",type:\"number\",value:height,pattern:\"\\\\d*\",onChange:e=>setHeight(e.target.value)})]}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"but\",disabled:name.length===0,type:\"button\",onClick:async()=>{setId((cityList.length+1).toString());try{const response=await fetch('http://localhost:9991/api/flowers/100/flowers/add',{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,name,coordinates:{x,y},area,population,metersAboveSeaLevel,government,governor:{height,birthday}})});if(response.ok){fetchData();}else{throw new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();console.log(data);}catch(e){console.log('Sending error',e);}finally{setModalActive(false);}},children:\"\\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"})})]})]})})]})]});};export default Table;","map":{"version":3,"names":["React","useEffect","useState","axios","Modal","Select","parseStringPromise","jsx","_jsx","jsxs","_jsxs","Government","Table","id","setId","name","setName","coordinates","setCoordinates","creationDate","setCreationDatee","area","setArea","population","setPopulation","metersAboveSeaLevel","setMetersAboveSeaLevel","establishmentDate","setEstablishmentDate","capital","setCapital","government","setGovernment","governor","setGovernor","x","setX","y","setY","height","setHeight","birthday","setBirthday","cityList","setCityList","CityId","setCityId","GovernmentId","setGovernmentId","valueGovernment","setValueGovernment","modalActive","setModalActive","response","setResponse","onChangeGovernment","newValue","value","governmentOptions","Object","values","map","gov","label","handleKeyPress","e","regex","test","key","preventDefault","fetchData","xmlData","res","fetch","method","headers","body","ok","Error","xmlText","text","result","cities","CitiesWithPagerDto","City","updatedCityList","forEach","foundOption","findIndex","a","parseFloat","Coordinates","newCityData","parseInt","Human","human","push","error","errorMessage","message","String","console","fetchData1","get","log","data","index","className","children","placeholder","type","min","onChange","target","onClick","json","status","Number","max","city","active","setActive","pattern","classNamePrefix","find","option","options","inputValue","onInputChange","onMenuOpen","onMenuClose","disabled","length","toString","JSON","stringify"],"sources":["/Users/irinaabakumova/SOA/frontend/src/pages/Table.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios, {AxiosResponse} from 'axios';\nimport '../App.css';\nimport Modal from '../Modal/modal';\nimport Select from 'react-select';\nimport { parseStringPromise } from 'xml2js';\n\n\ninterface City {\n    id: string;\n    name: string;\n    coordinates: Coordinates;\n    creationDate: Date;\n    area: number;\n    population: number;\n    establishmentDate: Date;\n    metersAboveSeaLevel: number;\n    capital: boolean;\n    government: Government;\n    governor: Human;\n}\n\n\ninterface Coordinates {\n    x: number;\n    y: number;\n}\n\nenum Government {\n    DESPOTISM = \"DESPOTISM\",\n    PATRIARCHY = \"PATRIARCHY\",\n    ETHNOCRACY = \"ETHNOCRACY\",\n}\n\ninterface Human{\n    height: number;\n    birthday: Date;\n}\n\nconst Table: React.FC = () => {\n        const [id, setId] = useState('');\n        const [name, setName] = useState('');\n        const [coordinates, setCoordinates] = useState<Coordinates[]>([]);\n        const [creationDate, setCreationDatee] = useState('');\n        const [area, setArea] = useState('');\n        const [population, setPopulation] = useState('');\n        const [metersAboveSeaLevel, setMetersAboveSeaLevel] = useState('');\n        const [establishmentDate, setEstablishmentDate] = useState('');\n        const [capital, setCapital] = useState('');\n        const [government, setGovernment] = useState<Government | null>(null);\n        const [governor, setGovernor] = useState<Human[]>([]);\n        const [x, setX] = useState('');\n        const [y, setY] = useState('');\n        const [height, setHeight] = useState('');\n        const [birthday, setBirthday] = useState('');\n        const [cityList, setCityList] = useState<City[]>([]);\n        const [CityId, setCityId] = useState('');\n        const [GovernmentId, setGovernmentId] = useState('');\n        const [valueGovernment, setValueGovernment] = useState('');\n        const [modalActive, setModalActive] = useState(false);\n        const [response, setResponse] = useState<string | null>(null);\n        const onChangeGovernment = (newValue: { label: Government; value: Government } | null) => {\n            setGovernment(newValue ? newValue.value : null);\n        };\n        const governmentOptions = Object.values(Government).map((gov) => ({\n            label: gov,\n            value: gov\n        }));\n\n        const handleKeyPress = (e:any) => {\n            // Запрещаем вводить всё, кроме цифр, точки и знака минус\n            const regex = /^[0-9\\.]+$/;\n            if (!regex.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete') {\n                e.preventDefault();\n            }\n        };\n        \n       \n        const fetchData = async () => {\n            const xmlData = `\n              <request>\n                <item>\n                  <name>example</name>\n                  <value>123</value>\n                </item>\n              </request>\n            `;\n        \n            try {\n              const res = await fetch('http://localhost:9991/api/city', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/xml',\n                },\n                body: xmlData,\n              });\n        \n              if (!res.ok) {\n                throw new Error('Network response was not ok');\n              }\n        \n              const xmlText = await res.text();\n              const result = await parseStringPromise(xmlText);\n              const cities = result.CitiesWithPagerDto.City;\n      \n              const updatedCityList: City[] = [...cityList]; // Копируем текущее состояние cityList\n\n              cities.forEach((res:any) => {\n                const foundOption = updatedCityList.findIndex(a => a.id === res.id[0]);\n                \n                // Извлекаем координаты\n                const coordinates = {\n                x: parseFloat(res.Coordinates[0].x[0]),\n                y: parseFloat(res.Coordinates[0].y[0]),\n                };\n                const newCityData: City = {\n                    id: res.id[0],\n                    name: res.name[0],\n                    coordinates: coordinates,\n                    creationDate: res.creationDate[0],\n                    area: parseFloat(res.area[0]),\n                    population: parseInt(res.population[0]),\n                    metersAboveSeaLevel: parseFloat(res.metersAboveSeaLevel[0]),\n                    establishmentDate: res.establishmentDate[0],\n                    capital: res.capital[0] === 'true', // Преобразование к boolean\n                    government: res.government[0],\n                    governor: res.Human.map((human: any) => ({\n                      height: parseFloat(human.height[0]),\n                      birthday: human.birthday[0],\n                    })),\n                  };\n          \n                  if (foundOption === -1) {\n                    // Добавляем новый город\n                    updatedCityList.push(newCityData);\n                  } else {\n                    // Обновляем существующий город\n                    updatedCityList[foundOption] = { ...updatedCityList[foundOption], ...newCityData };\n                  }\n                });\n          \n                setCityList(updatedCityList);\n      \n            } catch (error) {\n              let errorMessage: string;\n        \n              // Проверка типа error\n              if (error instanceof Error) {\n                errorMessage = error.message; // Доступ к сообщению об ошибке\n              } else {\n                errorMessage = String(error); // Преобразуем в строку, если это не Error\n              }\n        \n              console.error('Error:', errorMessage);\n              setResponse(`Error: ${errorMessage}`);\n            }}\n\n        const fetchData1 = async () => {\n            try {\n                const response: AxiosResponse<{ cityList: City[] }> = await axios.get(\n                    'http://localhost:9991/api/city',\n                    {\n                        headers: {'Access-Control-Allow-Origin': '*'},\n                    }\n                );\n                console.log(response);\n                setCityList(response.data.cityList);\n                response.data.cityList.map((res, index) => {\n                    const foundOption = cityList.findIndex(a => a.id === res.id);\n                    if (foundOption === -1) {\n                        cityList.push(res);\n                    } else {\n                        cityList[foundOption].name = res.name;\n                        cityList[foundOption].coordinates = res.coordinates;\n                        cityList[foundOption].creationDate = res.creationDate;\n                        cityList[foundOption].area = res.area;\n                        cityList[foundOption].population = res.population;\n                        cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                        cityList[foundOption].capital = res.capital;\n                        cityList[foundOption].government = res.government;\n                    }\n                    setCityList(cityList);\n                })\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n        \n        useEffect(() => {\n            fetchData()\n\n        }, []);\n\n        return (\n            <div className=\"body\">\n                <br/>\n                \n                <div className=\"container\">\n                <table className=\"selection\">\n                    <thead>\n                        <tr>\n                                <th>\n                                    <input\n                                        id=\"get_city\"\n                                        placeholder=\"Введите значение\"\n                                        type='number'\n                                        min=\"0\"\n                                        value={CityId}\n                                        onChange={(e) => setCityId(e.target.value)}\n                                    /> \n                                    <button className='add' onClick={async () => {                                          \n                                                try {\n                                                    const response = await fetch(`http://localhost:9991/api/city/${CityId}`, {\n                                                        method: 'GET',\n                                                        headers: {\n                                                            'Content-Type': 'application/json'\n                                                        }\n                                                    });\n                                                \n                                                    if (response.ok) {\n                                                        const data = await response.json();\n                                                        console.log('City data:', data);\n                                                        return data;\n                                                    } else {\n                                                        throw new Error(`HTTP error! Status: ${response.status}`);\n                                                    }\n                                                } catch (e) {\n                                                    console.log('Fetching error', e);\n                                                }                                         \n                                            }}>Получить город по id</button>\n                                </th>\n                                <th>\n                                    <input\n                                        id=\"delete_city\"\n                                        placeholder=\"Введите значение\"\n                                        value={CityId}\n                                        type='number'\n                                        min=\"0\"\n                                        onChange={(e) => setCityId(e.target.value)}\n                                    />                                \n                                    <button className='add' onClick={async () => {                                          \n                                                    try {\n                                                        const response = await fetch(`http://localhost:9991/api/city/city?cityID=${CityId}`, {\n                                                            method: 'DELETE',\n                                                            headers: {\n                                                                'Content-Type': 'application/json'\n                                                            }\n                                                        });\n\n                                                        if (response.ok) {\n                                                            delete cityList[Number({CityId})];\n                                                            fetchData();\n                                                        } else {\n                                                            throw new Error(`HTTP error! Status: ${response.status}`);\n                                                        }\n\n                                                        const data = await response.json();\n                                                        return data;\n                                                    } catch (e) {\n                                                        console.log('Sending error', e);\n                                                    }\n                                                }}>Удалить город по id </button>\n                                    </th>\n                                <th>\n                                    <input\n                                        id=\"get_government\"\n                                        placeholder=\"Введите значение\"\n                                        type='number'\n                                        value={GovernmentId}\n                                        min=\"0\"\n                                        max=\"2\"\n                                        onChange={(e) => setGovernmentId(e.target.value)}\n                                    /> \n                                    <button className='add' onClick={async () => {                                          \n                                                try {\n                                                    const response = await fetch(`http://localhost:9991/api/external/government/${valueGovernment}`, {\n                                                        method: 'GET',\n                                                        headers: {\n                                                            'Content-Type': 'application/json'\n                                                        }\n                                                    });\n                                                \n                                                    if (response.ok) {\n                                                        const data = await response.json();\n                                                        console.log('City data:', data);\n                                                        return data;\n                                                    } else {\n                                                        throw new Error(`HTTP error! Status: ${response.status}`);\n                                                    }\n                                                } catch (e) {\n                                                    console.log('Fetching error', e);\n                                                }                                         \n                                            }}>Город с government меньше заданного</button>\n                                </th>\n                        </tr>\n                        <tr>\n                            <th>\n                                <button className='add' onClick={() => {\n                                            setModalActive(true);\n                                        }}>Обновить город по id</button>\n                            </th>\n                            <th>\n                                <button className='add' onClick={async () => { \n                                    fetchData();\n                                }}>Получить города с пагинацией</button>\n                            </th>\n                            <th>\n                                <button className='add' onClick={async () => { \n                                    try {\n                                        const response: AxiosResponse<{ cityList: City[] }> = await axios.get(\n                                            'http://localhost:9991/api/external/min/id',\n                                            {\n                                                headers: {'Access-Control-Allow-Origin': '*'},\n                                            }\n                                        );\n                                        console.log(response);\n                                        setCityList(response.data.cityList);\n                                        response.data.cityList.map((res, index) => {\n                                            const foundOption = cityList.findIndex(a => a.id === res.id);\n                                            if (foundOption === -1) {\n                                                cityList.push(res);\n                                            } else {\n                                                cityList[foundOption].name = res.name;\n                                                cityList[foundOption].coordinates = res.coordinates;\n                                                cityList[foundOption].creationDate = res.creationDate;\n                                                cityList[foundOption].area = res.area;\n                                                cityList[foundOption].population = res.population;\n                                                cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                                                cityList[foundOption].capital = res.capital;\n                                                cityList[foundOption].government = res.government;\n                                            }\n                                            setCityList(cityList);\n                                        })\n                                    } catch (error) {\n                                        console.error('Error fetching data:', error);\n                                    }\n                                }}>Город с минимальным id</button>\n                            </th>\n                            <th>\n                                <button className='add' onClick={async () => { \n                                    try {\n                                        const response: AxiosResponse<{ cityList: City[] }> = await axios.get(\n                                            'http://localhost:9991/api/external/max/establishment-date',\n                                            {\n                                                headers: {'Access-Control-Allow-Origin': '*'},\n                                            }\n                                        );\n                                        console.log(response);\n                                        setCityList(response.data.cityList);\n                                        response.data.cityList.map((res, index) => {\n                                            const foundOption = cityList.findIndex(a => a.id === res.id);\n                                            if (foundOption === -1) {\n                                                cityList.push(res);\n                                            } else {\n                                                cityList[foundOption].name = res.name;\n                                                cityList[foundOption].coordinates = res.coordinates;\n                                                cityList[foundOption].creationDate = res.creationDate;\n                                                cityList[foundOption].area = res.area;\n                                                cityList[foundOption].population = res.population;\n                                                cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                                                cityList[foundOption].capital = res.capital;\n                                                cityList[foundOption].government = res.government;\n                                            }\n                                            setCityList(cityList);\n                                        })\n                                    } catch (error) {\n                                        console.error('Error fetching data:', error);\n                                    }\n                                }}>Город с максимальной датой</button>\n                            </th>                                                 \n                        </tr>                                                            \n                    </thead>\n                </table>\n                    <br></br>\n                    <table className=\"flower\">\n                        <thead>\n                        <tr>\n                            <th>Название</th>\n                            <th>Коордианты</th>\n                            <th>Площадь</th>\n                            <th>Население</th>\n                            <th>Высота над уровнем моря</th>\n                            <th>Тип правительства</th>\n                            <th>Мэр</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            cityList.map((city, index) => (\n                                <tr key={city.id}>\n                                    <td>{city.name}</td>\n                                    <td>{city.coordinates.x};{city.coordinates.y}</td>\n                                    <td>{city.area}</td>\n                                    <td>{city.population}</td>\n                                    <td>{city.metersAboveSeaLevel}</td>\n                                    <td>{city.government}</td>\n                                    <td>{city.governor.height}</td>                                      \n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n\n                    { <Modal active={modalActive} setActive={setModalActive}>\n                        \n                        <table className=\"tableAdd\">\n                            <tr>\n                                <td>\n                                    <p>ID</p>\n                                    <input id=\"id\" type=\"number\" value={id} pattern=\"\\d*\"\n                                    onChange={(e) => setId(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Название</p>\n                                    <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Коордианты</p>\n                                    <input id=\"x\" type=\"number\" value={x} pattern=\"\\d*\"\n                                           onChange={(e) => setX(e.target.value)}/>\n                                    <input id=\"y\" type=\"number\" value={y} pattern=\"\\d*\"\n                                    onChange={(e) => setY(e.target.value)}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <p>Площадь</p>\n                                    <input id=\"area\" type=\"number\" value={area} pattern=\"\\d*\"\n                                    onChange={(e) => setArea(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Население</p>\n                                    <input id=\"population\" type=\"number\" value={population} pattern=\"\\d*\"\n                                    onChange={(e) => setPopulation(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Высота над УМ</p>\n                                    <input id=\"metersAboveSeaLevel\" type=\"texnumbert\" value={metersAboveSeaLevel} pattern=\"\\d*\"\n                                    onChange={(e) => setMetersAboveSeaLevel(e.target.value)}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <p>Тип правительства</p>\n                                    <Select \n                                        classNamePrefix=\"select_type\" \n                                        onChange={onChangeGovernment} \n                                        value={governmentOptions.find(option => option.value === government) || null}\n                                        options={governmentOptions}\n                                        inputValue={\"\"}\n                                        onInputChange={() => {}} \n                                        onMenuOpen={() => {}} \n                                        onMenuClose={() => {}}\n                                    />\n                                </td>\n                                <td>\n                                    <p>Мэр</p>\n                                    <input id=\"height\" type=\"number\" value={height} pattern=\"\\d*\"\n                                    onChange={(e) => setHeight(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <button\n                                        className=\"but\"\n                                        disabled={name.length === 0}\n                                        type=\"button\"\n                                        onClick={async () => {\n                                            setId((cityList.length + 1).toString());\n                                            try {\n                                                const response = await fetch('http://localhost:9991/api/flowers/100/flowers/add', {\n                                                    method: 'PUT',\n                                                    headers: {\n                                                        'Content-Type': 'application/json'\n                                                    },\n                                                    body: JSON.stringify({\n                                                        id,\n                                                        name,\n                                                        coordinates: {\n                                                            x,\n                                                            y\n                                                        },\n                                                        area,\n                                                        population,\n                                                        metersAboveSeaLevel,\n                                                        government,\n                                                        governor:{\n                                                            height,\n                                                            birthday\n                                                        }\n\n                                                    })\n                                                });\n                                                if (response.ok) {\n                                                    fetchData();\n\n                                                } else {\n                                                    throw new Error(`HTTP error! Status: ${response.status}`);\n                                                }\n                                                const data = await response.json();\n                                                console.log(data);\n                                            } catch (e) {\n                                                console.log('Sending error', e);\n                                            } finally {\n                                                setModalActive(false);\n                                            }\n                                        }}\n                                    >\n                                        Применить\n                                    </button>\n                                </td>\n                            </tr>\n                        </table>\n                    </Modal> }\n                </div>\n            </div>\n        );\n    }\n;\n\nexport default Table;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}