{"ast":null,"code":"var _jsxFileName = \"/Users/irinaabakumova/SOA/frontend/src/pages/Table.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport Modal from '../Modal/modal';\nimport Select from 'react-select';\nimport { parseStringPromise } from 'xml2js';\nimport Button, { TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Government = /*#__PURE__*/function (Government) {\n  Government[\"DESPOTISM\"] = \"DESPOTISM\";\n  Government[\"PATRIARCHY\"] = \"PATRIARCHY\";\n  Government[\"ETHNOCRACY\"] = \"ETHNOCRACY\";\n  return Government;\n}(Government || {});\nconst Table = () => {\n  _s();\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [coordinates, setCoordinates] = useState([]);\n  const [creationDate, setCreationDatee] = useState('');\n  const [area, setArea] = useState('');\n  const [population, setPopulation] = useState('');\n  const [metersAboveSeaLevel, setMetersAboveSeaLevel] = useState('');\n  const [establishmentDate, setEstablishmentDate] = useState('');\n  const [capital, setCapital] = useState('');\n  const [government, setGovernment] = useState(null);\n  const [governor, setGovernor] = useState([]);\n  const [x, setX] = useState('');\n  const [y, setY] = useState('');\n  const [height, setHeight] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [cityList, setCityList] = useState([]);\n  const [CityId, setCityId] = useState('');\n  const [GovernmentId, setGovernmentId] = useState('');\n  const [valueGovernment, setValueGovernment] = useState('');\n  const [modalActive, setModalActive] = useState(false);\n  const [response, setResponse] = useState(null);\n  const onChangeGovernment = newValue => {\n    setGovernment(newValue ? newValue.value : null);\n  };\n  const governmentOptions = Object.values(Government).map(gov => ({\n    label: gov,\n    value: gov\n  }));\n  const handleKeyPress = e => {\n    // Запрещаем вводить всё, кроме цифр, точки и знака минус\n    const regex = /^[0-9\\.]+$/;\n    if (!regex.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete') {\n      e.preventDefault();\n    }\n  };\n  const fetchData = async () => {\n    const xmlData = `\n                <CitiesRequest>\n                    <page>1</page>\n                    <pageSize>100</pageSize>\n                    <SortingStrategy>\n                        <sortingType>asc</sortingType>\n                        <sortingColumn>id</sortingColumn>\n                    </SortingStrategy>\n                    <FilterStrategy>\n                        <filterColumn>id</filterColumn>\n                        <filterType>contains</filterType>\n                        <filterValue>string</filterValue>\n                    </FilterStrategy>\n                </CitiesRequest>\n            `;\n    try {\n      const res = await fetch('http://localhost:9991/api/city', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/xml'\n        },\n        body: xmlData\n      });\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await res.text();\n      const result = await parseStringPromise(xmlText);\n      const cities = result.CitiesWithPagerDto.City;\n      const updatedCityList = [...cityList]; // Копируем текущее состояние cityList\n\n      cities.forEach(res => {\n        const foundOption = updatedCityList.findIndex(a => a.id === res.id[0]);\n\n        // Извлекаем координаты\n        const coordinates = {\n          x: parseFloat(res.Coordinates[0].x[0]),\n          y: parseFloat(res.Coordinates[0].y[0])\n        };\n        const newCityData = {\n          id: res.id[0],\n          name: res.name[0],\n          coordinates: coordinates,\n          creationDate: res.creationDate[0],\n          area: parseFloat(res.area[0]),\n          population: parseInt(res.population[0]),\n          metersAboveSeaLevel: parseFloat(res.metersAboveSeaLevel[0]),\n          establishmentDate: res.establishmentDate[0],\n          capital: res.capital[0] === 'true',\n          // Преобразование к boolean\n          government: res.government[0],\n          governor: res.Human.map(human => ({\n            height: parseFloat(human.height[0]),\n            birthday: human.birthday[0]\n          }))\n        };\n        updatedCityList.push(newCityData);\n        console.warn(\"добавили город\");\n        if (foundOption === -1) {\n          // Добавляем новый город\n          updatedCityList.push(newCityData);\n          console.warn(\"добавили город\");\n        } else {\n          // Обновляем существующий город\n          updatedCityList[foundOption] = {\n            ...updatedCityList[foundOption],\n            ...newCityData\n          };\n          console.warn(\"не добавили город\");\n        }\n      });\n      setCityList(updatedCityList);\n    } catch (error) {\n      let errorMessage;\n\n      // Проверка типа error\n      if (error instanceof Error) {\n        errorMessage = error.message; // Доступ к сообщению об ошибке\n      } else {\n        errorMessage = String(error); // Преобразуем в строку, если это не Error\n      }\n      console.error('Error:', errorMessage);\n      setResponse(`Error: ${errorMessage}`);\n    }\n  };\n  const fetchData1 = async () => {\n    try {\n      const response = await axios.get('http://localhost:9991/api/city', {\n        headers: {\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n      console.log(response);\n      setCityList(response.data.cityList);\n      response.data.cityList.map((res, index) => {\n        const foundOption = cityList.findIndex(a => a.id === res.id);\n        if (foundOption === -1) {\n          cityList.push(res);\n        } else {\n          cityList[foundOption].name = res.name;\n          cityList[foundOption].coordinates = res.coordinates;\n          cityList[foundOption].creationDate = res.creationDate;\n          cityList[foundOption].area = res.area;\n          cityList[foundOption].population = res.population;\n          cityList[foundOption].establishmentDate = res.establishmentDate;\n          cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n          cityList[foundOption].capital = res.capital;\n          cityList[foundOption].government = res.government;\n        }\n        setCityList(cityList);\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        children: \"Hello world\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"selection\",\n        children: /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-basic\",\n                label: \"Outlined\",\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"get_city\",\n                placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",\n                type: \"number\",\n                min: \"0\",\n                value: CityId,\n                onChange: e => setCityId(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: async () => {\n                  try {\n                    const response = await fetch(`http://localhost:9991/api/city/${CityId}`, {\n                      method: 'GET',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      }\n                    });\n                    if (response.ok) {\n                      const data = await response.json();\n                      console.log('City data:', data);\n                      return data;\n                    } else {\n                      throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                  } catch (e) {\n                    console.log('Fetching error', e);\n                  }\n                },\n                children: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 \\u043F\\u043E id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"delete_city\",\n                placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",\n                value: CityId,\n                type: \"number\",\n                min: \"0\",\n                onChange: e => setCityId(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: async () => {\n                  try {\n                    const response = await fetch(`http://localhost:9991/api/city/city?cityID=${CityId}`, {\n                      method: 'DELETE',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      }\n                    });\n                    if (response.ok) {\n                      delete cityList[Number({\n                        CityId\n                      })];\n                      fetchData();\n                    } else {\n                      throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                    const data = await response.json();\n                    return data;\n                  } catch (e) {\n                    console.log('Sending error', e);\n                  }\n                },\n                children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 \\u043F\\u043E id \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"get_government\",\n                placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\",\n                type: \"number\",\n                value: GovernmentId,\n                min: \"0\",\n                max: \"2\",\n                onChange: e => setGovernmentId(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: async () => {\n                  try {\n                    const response = await fetch(`http://localhost:9991/api/external/government/${valueGovernment}`, {\n                      method: 'GET',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      }\n                    });\n                    if (response.ok) {\n                      const data = await response.json();\n                      console.log('City data:', data);\n                      return data;\n                    } else {\n                      throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                  } catch (e) {\n                    console.log('Fetching error', e);\n                  }\n                },\n                children: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 government \\u043C\\u0435\\u043D\\u044C\\u0448\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u0433\\u043E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: () => {\n                  setModalActive(true);\n                },\n                children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 \\u043F\\u043E id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: async () => {\n                  fetchData();\n                },\n                children: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430 \\u0441 \\u043F\\u0430\\u0433\\u0438\\u043D\\u0430\\u0446\\u0438\\u0435\\u0439\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: async () => {\n                  try {\n                    const response = await axios.get('http://localhost:9991/api/external/min/id', {\n                      headers: {\n                        'Access-Control-Allow-Origin': '*'\n                      }\n                    });\n                    console.log(response);\n                    setCityList(response.data.cityList);\n                    response.data.cityList.map((res, index) => {\n                      const foundOption = cityList.findIndex(a => a.id === res.id);\n                      if (foundOption === -1) {\n                        cityList.push(res);\n                      } else {\n                        cityList[foundOption].name = res.name;\n                        cityList[foundOption].coordinates = res.coordinates;\n                        cityList[foundOption].creationDate = res.creationDate;\n                        cityList[foundOption].area = res.area;\n                        cityList[foundOption].population = res.population;\n                        cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                        cityList[foundOption].capital = res.capital;\n                        cityList[foundOption].government = res.government;\n                      }\n                      setCityList(cityList);\n                    });\n                  } catch (error) {\n                    console.error('Error fetching data:', error);\n                  }\n                },\n                children: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 \\u043C\\u0438\\u043D\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u044B\\u043C id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add\",\n                onClick: async () => {\n                  try {\n                    const response = await axios.get('http://localhost:9991/api/external/max/establishment-date', {\n                      headers: {\n                        'Access-Control-Allow-Origin': '*'\n                      }\n                    });\n                    console.log(response);\n                    setCityList(response.data.cityList);\n                    response.data.cityList.map((res, index) => {\n                      const foundOption = cityList.findIndex(a => a.id === res.id);\n                      if (foundOption === -1) {\n                        cityList.push(res);\n                      } else {\n                        cityList[foundOption].name = res.name;\n                        cityList[foundOption].coordinates = res.coordinates;\n                        cityList[foundOption].creationDate = res.creationDate;\n                        cityList[foundOption].area = res.area;\n                        cityList[foundOption].population = res.population;\n                        cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                        cityList[foundOption].capital = res.capital;\n                        cityList[foundOption].government = res.government;\n                      }\n                      setCityList(cityList);\n                    });\n                  } catch (error) {\n                    console.error('Error fetching data:', error);\n                  }\n                },\n                children: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0441 \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0439 \\u0434\\u0430\\u0442\\u043E\\u0439\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"flower\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041A\\u043E\\u043E\\u0440\\u0434\\u0438\\u0430\\u043D\\u0442\\u044B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u0438\\u0435\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u043D\\u0430\\u0434 \\u0443\\u0440\\u043E\\u0432\\u043D\\u0435\\u043C \\u043C\\u043E\\u0440\\u044F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0422\\u0438\\u043F \\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u0441\\u0442\\u0432\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041C\\u044D\\u0440\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: cityList.map((city, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: city.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [city.coordinates.x, \";\", city.coordinates.y]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: city.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: city.population\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: city.metersAboveSeaLevel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: city.government\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: city.governor.height\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 37\n            }, this)]\n          }, city.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        active: modalActive,\n        setActive: setModalActive,\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"tableAdd\",\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"id\",\n                type: \"number\",\n                value: id,\n                pattern: \"\\\\d*\",\n                onChange: e => setId(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: name,\n                onChange: e => setName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u041A\\u043E\\u043E\\u0440\\u0434\\u0438\\u0430\\u043D\\u0442\\u044B\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"x\",\n                type: \"number\",\n                value: x,\n                pattern: \"\\\\d*\",\n                onChange: e => setX(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"y\",\n                type: \"number\",\n                value: y,\n                pattern: \"\\\\d*\",\n                onChange: e => setY(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u041F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"area\",\n                type: \"number\",\n                value: area,\n                pattern: \"\\\\d*\",\n                onChange: e => setArea(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u0438\\u0435\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"population\",\n                type: \"number\",\n                value: population,\n                pattern: \"\\\\d*\",\n                onChange: e => setPopulation(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u043D\\u0430\\u0434 \\u0423\\u041C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"metersAboveSeaLevel\",\n                type: \"texnumbert\",\n                value: metersAboveSeaLevel,\n                pattern: \"\\\\d*\",\n                onChange: e => setMetersAboveSeaLevel(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u0422\\u0438\\u043F \\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u0441\\u0442\\u0432\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                classNamePrefix: \"select_type\",\n                onChange: onChangeGovernment,\n                value: governmentOptions.find(option => option.value === government) || null,\n                options: governmentOptions,\n                inputValue: \"\",\n                onInputChange: () => {},\n                onMenuOpen: () => {},\n                onMenuClose: () => {}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u041C\\u044D\\u0440\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"height\",\n                type: \"number\",\n                value: height,\n                pattern: \"\\\\d*\",\n                onChange: e => setHeight(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"but\",\n                disabled: name.length === 0,\n                type: \"button\",\n                onClick: async () => {\n                  setId((cityList.length + 1).toString());\n                  try {\n                    const response = await fetch('http://localhost:9991/api/flowers/100/flowers/add', {\n                      method: 'PUT',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      },\n                      body: JSON.stringify({\n                        id,\n                        name,\n                        coordinates: {\n                          x,\n                          y\n                        },\n                        area,\n                        population,\n                        metersAboveSeaLevel,\n                        government,\n                        governor: {\n                          height,\n                          birthday\n                        }\n                      })\n                    });\n                    if (response.ok) {\n                      fetchData();\n                    } else {\n                      throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                    const data = await response.json();\n                    console.log(data);\n                  } catch (e) {\n                    console.log('Sending error', e);\n                  } finally {\n                    setModalActive(false);\n                  }\n                },\n                children: \"\\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 13\n  }, this);\n};\n_s(Table, \"NJuajhEHI6R3uSgcMn8xw6JBjYs=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useEffect","useState","axios","Modal","Select","parseStringPromise","Button","TextField","jsxDEV","_jsxDEV","Government","Table","_s","id","setId","name","setName","coordinates","setCoordinates","creationDate","setCreationDatee","area","setArea","population","setPopulation","metersAboveSeaLevel","setMetersAboveSeaLevel","establishmentDate","setEstablishmentDate","capital","setCapital","government","setGovernment","governor","setGovernor","x","setX","y","setY","height","setHeight","birthday","setBirthday","cityList","setCityList","CityId","setCityId","GovernmentId","setGovernmentId","valueGovernment","setValueGovernment","modalActive","setModalActive","response","setResponse","onChangeGovernment","newValue","value","governmentOptions","Object","values","map","gov","label","handleKeyPress","e","regex","test","key","preventDefault","fetchData","xmlData","res","fetch","method","headers","body","ok","Error","xmlText","text","result","cities","CitiesWithPagerDto","City","updatedCityList","forEach","foundOption","findIndex","a","parseFloat","Coordinates","newCityData","parseInt","Human","human","push","console","warn","error","errorMessage","message","String","fetchData1","get","log","data","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","placeholder","type","min","onChange","target","onClick","json","status","Number","max","city","active","setActive","pattern","classNamePrefix","find","option","options","inputValue","onInputChange","onMenuOpen","onMenuClose","disabled","length","toString","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/irinaabakumova/SOA/frontend/src/pages/Table.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios, {AxiosResponse} from 'axios';\nimport '../App.css';\nimport Modal from '../Modal/modal';\nimport Select from 'react-select';\nimport { parseStringPromise } from 'xml2js';\nimport Button, { TextField } from '@mui/material';\n\n\n\ninterface City {\n    id: string;\n    name: string;\n    coordinates: Coordinates;\n    creationDate: Date;\n    area: number;\n    population?: number;\n    establishmentDate?: Date;\n    metersAboveSeaLevel?: number;\n    capital: boolean;\n    government: Government;\n    governor: Human;\n}\n\n\ninterface Coordinates {\n    x?: number;\n    y: number;\n}\n\nenum Government {\n    DESPOTISM = \"DESPOTISM\",\n    PATRIARCHY = \"PATRIARCHY\",\n    ETHNOCRACY = \"ETHNOCRACY\",\n}\n\ninterface Human{\n    height?: number;\n    birthday?: Date;\n}\n\nconst Table: React.FC = () => {\n        const [id, setId] = useState('');\n        const [name, setName] = useState('');\n        const [coordinates, setCoordinates] = useState<Coordinates[]>([]);\n        const [creationDate, setCreationDatee] = useState('');\n        const [area, setArea] = useState('');\n        const [population, setPopulation] = useState('');\n        const [metersAboveSeaLevel, setMetersAboveSeaLevel] = useState('');\n        const [establishmentDate, setEstablishmentDate] = useState('');\n        const [capital, setCapital] = useState('');\n        const [government, setGovernment] = useState<Government | null>(null);\n        const [governor, setGovernor] = useState<Human[]>([]);\n        const [x, setX] = useState('');\n        const [y, setY] = useState('');\n        const [height, setHeight] = useState('');\n        const [birthday, setBirthday] = useState('');\n        const [cityList, setCityList] = useState<City[]>([]);\n        const [CityId, setCityId] = useState('');\n        const [GovernmentId, setGovernmentId] = useState('');\n        const [valueGovernment, setValueGovernment] = useState('');\n        const [modalActive, setModalActive] = useState(false);\n        const [response, setResponse] = useState<string | null>(null);\n        const onChangeGovernment = (newValue: { label: Government; value: Government } | null) => {\n            setGovernment(newValue ? newValue.value : null);\n        };\n        const governmentOptions = Object.values(Government).map((gov) => ({\n            label: gov,\n            value: gov\n        }));\n\n        const handleKeyPress = (e:any) => {\n            // Запрещаем вводить всё, кроме цифр, точки и знака минус\n            const regex = /^[0-9\\.]+$/;\n            if (!regex.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete') {\n                e.preventDefault();\n            }\n        };\n        \n       \n        const fetchData = async () => {\n            const xmlData = `\n                <CitiesRequest>\n                    <page>1</page>\n                    <pageSize>100</pageSize>\n                    <SortingStrategy>\n                        <sortingType>asc</sortingType>\n                        <sortingColumn>id</sortingColumn>\n                    </SortingStrategy>\n                    <FilterStrategy>\n                        <filterColumn>id</filterColumn>\n                        <filterType>contains</filterType>\n                        <filterValue>string</filterValue>\n                    </FilterStrategy>\n                </CitiesRequest>\n            `;\n        \n            try {\n              const res = await fetch('http://localhost:9991/api/city', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/xml',\n                },\n                body: xmlData,\n              });\n        \n              if (!res.ok) {\n                throw new Error('Network response was not ok');\n              }\n        \n              const xmlText = await res.text();\n              const result = await parseStringPromise(xmlText);\n              const cities = result.CitiesWithPagerDto.City;\n\n              const updatedCityList: City[] = [...cityList]; // Копируем текущее состояние cityList\n\n              cities.forEach((res:any) => {\n                const foundOption = updatedCityList.findIndex(a => a.id === res.id[0]);\n                \n                // Извлекаем координаты\n                const coordinates = {\n                x: parseFloat(res.Coordinates[0].x[0]),\n                y: parseFloat(res.Coordinates[0].y[0]),\n                };\n                const newCityData: City = {\n                    id: res.id[0],\n                    name: res.name[0],\n                    coordinates: coordinates,\n                    creationDate: res.creationDate[0],\n                    area: parseFloat(res.area[0]),\n                    population: parseInt(res.population[0]),\n                    metersAboveSeaLevel: parseFloat(res.metersAboveSeaLevel[0]),\n                    establishmentDate: res.establishmentDate[0],\n                    capital: res.capital[0] === 'true', // Преобразование к boolean\n                    government: res.government[0],\n                    governor: res.Human.map((human: any) => ({\n                      height: parseFloat(human.height[0]),\n                      birthday: human.birthday[0],\n                    })),\n                  };\n                  updatedCityList.push(newCityData);\n                  console.warn(\"добавили город\")\n                  if (foundOption === -1) {\n                    // Добавляем новый город\n                    updatedCityList.push(newCityData);\n                    console.warn(\"добавили город\")\n                  } else {\n                    // Обновляем существующий город\n                    updatedCityList[foundOption] = { ...updatedCityList[foundOption], ...newCityData };\n                    console.warn(\"не добавили город\")\n                  }\n                });\n          \n                setCityList(updatedCityList);\n      \n            } catch (error) {\n              let errorMessage: string;\n        \n              // Проверка типа error\n              if (error instanceof Error) {\n                errorMessage = error.message; // Доступ к сообщению об ошибке\n              } else {\n                errorMessage = String(error); // Преобразуем в строку, если это не Error\n              }\n        \n              console.error('Error:', errorMessage);\n              setResponse(`Error: ${errorMessage}`);\n            }}\n\n        const fetchData1 = async () => {\n            try {\n                const response: AxiosResponse<{ cityList: City[] }> = await axios.get(\n                    'http://localhost:9991/api/city',\n                    {\n                        headers: {'Access-Control-Allow-Origin': '*'},\n                    }\n                );\n                console.log(response);\n                setCityList(response.data.cityList);\n                response.data.cityList.map((res, index) => {\n                    const foundOption = cityList.findIndex(a => a.id === res.id);\n                    if (foundOption === -1) {\n                        cityList.push(res);\n                    } else {\n                        cityList[foundOption].name = res.name;\n                        cityList[foundOption].coordinates = res.coordinates;\n                        cityList[foundOption].creationDate = res.creationDate;\n                        cityList[foundOption].area = res.area;\n                        cityList[foundOption].population = res.population;\n                        cityList[foundOption].establishmentDate = res.establishmentDate;\n                        cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                        cityList[foundOption].capital = res.capital;\n                        cityList[foundOption].government = res.government;\n                    }\n                    setCityList(cityList);\n                })\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n        \n        useEffect(() => {\n            fetchData()\n\n        }, []);\n\n        return (\n            <div className=\"body\">\n                <br/>\n                \n                <div className=\"container\">\n                <Button variant=\"contained\">Hello world</Button>\n                <table className=\"selection\">\n                    <thead>\n                        <tr>\n                                <th>\n                                <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\n                                    <input\n                                        id=\"get_city\"\n                                        placeholder=\"Введите значение\"\n                                        type='number'\n                                        min=\"0\"\n                                        value={CityId}\n                                        onChange={(e) => setCityId(e.target.value)}\n                                    /> \n                                    <button className='add' onClick={async () => {                                          \n                                                try {\n                                                    const response = await fetch(`http://localhost:9991/api/city/${CityId}`, {\n                                                        method: 'GET',\n                                                        headers: {\n                                                            'Content-Type': 'application/json'\n                                                        }\n                                                    });\n                                                \n                                                    if (response.ok) {\n                                                        const data = await response.json();\n                                                        console.log('City data:', data);\n                                                        return data;\n                                                    } else {\n                                                        throw new Error(`HTTP error! Status: ${response.status}`);\n                                                    }\n                                                } catch (e) {\n                                                    console.log('Fetching error', e);\n                                                }                                         \n                                            }}>Получить город по id</button>\n                                </th>\n                                <th>\n                                    <input\n                                        id=\"delete_city\"\n                                        placeholder=\"Введите значение\"\n                                        value={CityId}\n                                        type='number'\n                                        min=\"0\"\n                                        onChange={(e) => setCityId(e.target.value)}\n                                    />                                \n                                    <button className='add' onClick={async () => {                                          \n                                                    try {\n                                                        const response = await fetch(`http://localhost:9991/api/city/city?cityID=${CityId}`, {\n                                                            method: 'DELETE',\n                                                            headers: {\n                                                                'Content-Type': 'application/json'\n                                                            }\n                                                        });\n\n                                                        if (response.ok) {\n                                                            delete cityList[Number({CityId})];\n                                                            fetchData();\n                                                        } else {\n                                                            throw new Error(`HTTP error! Status: ${response.status}`);\n                                                        }\n\n                                                        const data = await response.json();\n                                                        return data;\n                                                    } catch (e) {\n                                                        console.log('Sending error', e);\n                                                    }\n                                                }}>Удалить город по id </button>\n                                    </th>\n                                <th>\n                                    <input\n                                        id=\"get_government\"\n                                        placeholder=\"Введите значение\"\n                                        type='number'\n                                        value={GovernmentId}\n                                        min=\"0\"\n                                        max=\"2\"\n                                        onChange={(e) => setGovernmentId(e.target.value)}\n                                    /> \n                                    <button className='add' onClick={async () => {                                          \n                                                try {\n                                                    const response = await fetch(`http://localhost:9991/api/external/government/${valueGovernment}`, {\n                                                        method: 'GET',\n                                                        headers: {\n                                                            'Content-Type': 'application/json'\n                                                        }\n                                                    });\n                                                \n                                                    if (response.ok) {\n                                                        const data = await response.json();\n                                                        console.log('City data:', data);\n                                                        return data;\n                                                    } else {\n                                                        throw new Error(`HTTP error! Status: ${response.status}`);\n                                                    }\n                                                } catch (e) {\n                                                    console.log('Fetching error', e);\n                                                }                                         \n                                            }}>Город с government меньше заданного</button>\n                                </th>\n                        </tr>\n                        <tr>\n                            <th>\n                                <button className='add' onClick={() => {\n                                            setModalActive(true);\n                                        }}>Обновить город по id</button>\n                            </th>\n                            <th>\n                                <button className='add' onClick={async () => { \n                                    fetchData();\n                                }}>Получить города с пагинацией</button>\n                            </th>\n                            <th>\n                                <button className='add' onClick={async () => { \n                                    try {\n                                        const response: AxiosResponse<{ cityList: City[] }> = await axios.get(\n                                            'http://localhost:9991/api/external/min/id',\n                                            {\n                                                headers: {'Access-Control-Allow-Origin': '*'},\n                                            }\n                                        );\n                                        console.log(response);\n                                        setCityList(response.data.cityList);\n                                        response.data.cityList.map((res, index) => {\n                                            const foundOption = cityList.findIndex(a => a.id === res.id);\n                                            if (foundOption === -1) {\n                                                cityList.push(res);\n                                            } else {\n                                                cityList[foundOption].name = res.name;\n                                                cityList[foundOption].coordinates = res.coordinates;\n                                                cityList[foundOption].creationDate = res.creationDate;\n                                                cityList[foundOption].area = res.area;\n                                                cityList[foundOption].population = res.population;\n                                                cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                                                cityList[foundOption].capital = res.capital;\n                                                cityList[foundOption].government = res.government;\n                                            }\n                                            setCityList(cityList);\n                                        })\n                                    } catch (error) {\n                                        console.error('Error fetching data:', error);\n                                    }\n                                }}>Город с минимальным id</button>\n                            </th>\n                            <th>\n                                <button className='add' onClick={async () => { \n                                    try {\n                                        const response: AxiosResponse<{ cityList: City[] }> = await axios.get(\n                                            'http://localhost:9991/api/external/max/establishment-date',\n                                            {\n                                                headers: {'Access-Control-Allow-Origin': '*'},\n                                            }\n                                        );\n                                        console.log(response);\n                                        setCityList(response.data.cityList);\n                                        response.data.cityList.map((res, index) => {\n                                            const foundOption = cityList.findIndex(a => a.id === res.id);\n                                            if (foundOption === -1) {\n                                                cityList.push(res);\n                                            } else {\n                                                cityList[foundOption].name = res.name;\n                                                cityList[foundOption].coordinates = res.coordinates;\n                                                cityList[foundOption].creationDate = res.creationDate;\n                                                cityList[foundOption].area = res.area;\n                                                cityList[foundOption].population = res.population;\n                                                cityList[foundOption].metersAboveSeaLevel = res.metersAboveSeaLevel;\n                                                cityList[foundOption].capital = res.capital;\n                                                cityList[foundOption].government = res.government;\n                                            }\n                                            setCityList(cityList);\n                                        })\n                                    } catch (error) {\n                                        console.error('Error fetching data:', error);\n                                    }\n                                }}>Город с максимальной датой</button>\n                            </th>                                                 \n                        </tr>                                                            \n                    </thead>\n                </table>\n                    <br></br>\n                    <table className=\"flower\">\n                        <thead>\n                        <tr>\n                            <th>Название</th>\n                            <th>Коордианты</th>\n                            <th>Площадь</th>\n                            <th>Население</th>\n                            <th>Высота над уровнем моря</th>\n                            <th>Тип правительства</th>\n                            <th>Мэр</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            cityList.map((city, index) => (\n                                <tr key={city.id}>\n                                    <td>{city.name}</td>\n                                    <td>{city.coordinates.x};{city.coordinates.y}</td>\n                                    <td>{city.area}</td>\n                                    <td>{city.population}</td>\n                                    <td>{city.metersAboveSeaLevel}</td>\n                                    <td>{city.government}</td>\n                                    <td>{city.governor.height}</td>                                      \n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n\n                    { <Modal active={modalActive} setActive={setModalActive}>\n                        \n                        <table className=\"tableAdd\">\n                            <tr>\n                                <td>\n                                    <p>ID</p>\n                                    <input id=\"id\" type=\"number\" value={id} pattern=\"\\d*\"\n                                    onChange={(e) => setId(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Название</p>\n                                    <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Коордианты</p>\n                                    <input id=\"x\" type=\"number\" value={x} pattern=\"\\d*\"\n                                           onChange={(e) => setX(e.target.value)}/>\n                                    <input id=\"y\" type=\"number\" value={y} pattern=\"\\d*\"\n                                    onChange={(e) => setY(e.target.value)}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <p>Площадь</p>\n                                    <input id=\"area\" type=\"number\" value={area} pattern=\"\\d*\"\n                                    onChange={(e) => setArea(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Население</p>\n                                    <input id=\"population\" type=\"number\" value={population} pattern=\"\\d*\"\n                                    onChange={(e) => setPopulation(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <p>Высота над УМ</p>\n                                    <input id=\"metersAboveSeaLevel\" type=\"texnumbert\" value={metersAboveSeaLevel} pattern=\"\\d*\"\n                                    onChange={(e) => setMetersAboveSeaLevel(e.target.value)}/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <p>Тип правительства</p>\n                                    <Select \n                                        classNamePrefix=\"select_type\" \n                                        onChange={onChangeGovernment} \n                                        value={governmentOptions.find(option => option.value === government) || null}\n                                        options={governmentOptions}\n                                        inputValue={\"\"}\n                                        onInputChange={() => {}} \n                                        onMenuOpen={() => {}} \n                                        onMenuClose={() => {}}\n                                    />\n                                </td>\n                                <td>\n                                    <p>Мэр</p>\n                                    <input id=\"height\" type=\"number\" value={height} pattern=\"\\d*\"\n                                    onChange={(e) => setHeight(e.target.value)}/>\n                                </td>\n                                <td>\n                                    <button\n                                        className=\"but\"\n                                        disabled={name.length === 0}\n                                        type=\"button\"\n                                        onClick={async () => {\n                                            setId((cityList.length + 1).toString());\n                                            try {\n                                                const response = await fetch('http://localhost:9991/api/flowers/100/flowers/add', {\n                                                    method: 'PUT',\n                                                    headers: {\n                                                        'Content-Type': 'application/json'\n                                                    },\n                                                    body: JSON.stringify({\n                                                        id,\n                                                        name,\n                                                        coordinates: {\n                                                            x,\n                                                            y\n                                                        },\n                                                        area,\n                                                        population,\n                                                        metersAboveSeaLevel,\n                                                        government,\n                                                        governor:{\n                                                            height,\n                                                            birthday\n                                                        }\n\n                                                    })\n                                                });\n                                                if (response.ok) {\n                                                    fetchData();\n\n                                                } else {\n                                                    throw new Error(`HTTP error! Status: ${response.status}`);\n                                                }\n                                                const data = await response.json();\n                                                console.log(data);\n                                            } catch (e) {\n                                                console.log('Sending error', e);\n                                            } finally {\n                                                setModalActive(false);\n                                            }\n                                        }}\n                                    >\n                                        Применить\n                                    </button>\n                                </td>\n                            </tr>\n                        </table>\n                    </Modal> }\n                </div>\n            </div>\n        );\n    }\n;\n\nexport default Table;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}