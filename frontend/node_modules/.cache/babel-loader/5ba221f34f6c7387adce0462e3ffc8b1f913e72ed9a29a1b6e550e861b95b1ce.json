{"ast":null,"code":"var _jsxFileName = \"/Users/irinaabakumova/SOA/frontend/src/Components/GetGovernmentButton.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n// Импортируем City\n\n// Импортируем Government\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetGovernmentButton = ({\n  inputValue,\n  onCityUpdate\n}) => {\n  _s();\n  const [cities, setCities] = useState([]);\n  const handleButtonClick = async () => {\n    try {\n      const response = await fetch(`http://localhost:9991/api/external/government?type=${inputValue}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await response.text();\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\n      const ids = xmlDoc.getElementsByTagName(\"id\");\n      const n = ids.length;\n      for (var i = 0; i < n; i++) {\n        var _xmlDoc$getElementsBy, _xmlDoc$getElementsBy2, _xmlDoc$getElementsBy3, _xmlDoc$getElementsBy4, _xmlDoc$getElementsBy5, _xmlDoc$getElementsBy6, _xmlDoc$getElementsBy7, _xmlDoc$getElementsBy8, _xmlDoc$getElementsBy9, _xmlDoc$getElementsBy10, _xmlDoc$getElementsBy11, _xmlDoc$getElementsBy12;\n        const city = {\n          id: ((_xmlDoc$getElementsBy = xmlDoc.getElementsByTagName(\"id\")[i]) === null || _xmlDoc$getElementsBy === void 0 ? void 0 : _xmlDoc$getElementsBy.textContent) || '',\n          name: ((_xmlDoc$getElementsBy2 = xmlDoc.getElementsByTagName(\"name\")[i]) === null || _xmlDoc$getElementsBy2 === void 0 ? void 0 : _xmlDoc$getElementsBy2.textContent) || '',\n          coordinates: {\n            x: parseFloat(((_xmlDoc$getElementsBy3 = xmlDoc.getElementsByTagName(\"x\")[i]) === null || _xmlDoc$getElementsBy3 === void 0 ? void 0 : _xmlDoc$getElementsBy3.textContent) || '0'),\n            y: parseFloat(((_xmlDoc$getElementsBy4 = xmlDoc.getElementsByTagName(\"y\")[i]) === null || _xmlDoc$getElementsBy4 === void 0 ? void 0 : _xmlDoc$getElementsBy4.textContent) || '0')\n          },\n          creationDate: new Date(xmlDoc.getElementsByTagName(\"creationDate\")[i].textContent || 0),\n          area: parseFloat(((_xmlDoc$getElementsBy5 = xmlDoc.getElementsByTagName(\"area\")[i]) === null || _xmlDoc$getElementsBy5 === void 0 ? void 0 : _xmlDoc$getElementsBy5.textContent) || '0'),\n          population: parseInt(((_xmlDoc$getElementsBy6 = xmlDoc.getElementsByTagName(\"population\")[i]) === null || _xmlDoc$getElementsBy6 === void 0 ? void 0 : _xmlDoc$getElementsBy6.textContent) || '0'),\n          metersAboveSeaLevel: parseFloat(((_xmlDoc$getElementsBy7 = xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[i]) === null || _xmlDoc$getElementsBy7 === void 0 ? void 0 : _xmlDoc$getElementsBy7.textContent) || '0'),\n          establishmentDate: new Date(((_xmlDoc$getElementsBy8 = xmlDoc.getElementsByTagName(\"establishmentDate\")[i]) === null || _xmlDoc$getElementsBy8 === void 0 ? void 0 : _xmlDoc$getElementsBy8.textContent) || 0),\n          capital: ((_xmlDoc$getElementsBy9 = xmlDoc.getElementsByTagName(\"capital\")[i]) === null || _xmlDoc$getElementsBy9 === void 0 ? void 0 : _xmlDoc$getElementsBy9.textContent) === 'true',\n          government: (_xmlDoc$getElementsBy10 = xmlDoc.getElementsByTagName(\"government\")[i]) === null || _xmlDoc$getElementsBy10 === void 0 ? void 0 : _xmlDoc$getElementsBy10.textContent,\n          // Указываем тип Government\n          governor: {\n            height: parseFloat(((_xmlDoc$getElementsBy11 = xmlDoc.getElementsByTagName(\"height\")[i]) === null || _xmlDoc$getElementsBy11 === void 0 ? void 0 : _xmlDoc$getElementsBy11.textContent) || '0'),\n            birthday: new Date(((_xmlDoc$getElementsBy12 = xmlDoc.getElementsByTagName(\"birthday\")[i]) === null || _xmlDoc$getElementsBy12 === void 0 ? void 0 : _xmlDoc$getElementsBy12.textContent) || 0)\n          },\n          human: Array.from(xmlDoc.getElementsByTagName(\"inhabitant\")).map(humanElement => {\n            var _humanElement$getElem, _humanElement$getElem2;\n            return {\n              height: parseFloat(((_humanElement$getElem = humanElement.getElementsByTagName(\"height\")[0]) === null || _humanElement$getElem === void 0 ? void 0 : _humanElement$getElem.textContent) || '0'),\n              birthday: new Date(((_humanElement$getElem2 = humanElement.getElementsByTagName(\"birthday\")[0]) === null || _humanElement$getElem2 === void 0 ? void 0 : _humanElement$getElem2.textContent) || 0)\n            };\n          })\n        };\n        setCities(prev => [...prev, ...[city]]);\n      }\n      ;\n\n      // Передаем полученный объект обратно в TableCity или другой компонент\n      onCityUpdate(cities);\n    } catch (error) {\n      console.error('Error fetching city data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleButtonClick,\n      children: \"\\u0413\\u043E\\u0440\\u043E\\u0434 c government \\u043C\\u0435\\u043D\\u044C\\u0448\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u0433\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(GetGovernmentButton, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n_c = GetGovernmentButton;\nexport default GetGovernmentButton;\nvar _c;\n$RefreshReg$(_c, \"GetGovernmentButton\");","map":{"version":3,"names":["React","Button","Stack","useState","jsxDEV","_jsxDEV","GetGovernmentButton","inputValue","onCityUpdate","_s","cities","setCities","handleButtonClick","response","fetch","ok","Error","xmlText","text","parser","DOMParser","xmlDoc","parseFromString","ids","getElementsByTagName","n","length","i","_xmlDoc$getElementsBy","_xmlDoc$getElementsBy2","_xmlDoc$getElementsBy3","_xmlDoc$getElementsBy4","_xmlDoc$getElementsBy5","_xmlDoc$getElementsBy6","_xmlDoc$getElementsBy7","_xmlDoc$getElementsBy8","_xmlDoc$getElementsBy9","_xmlDoc$getElementsBy10","_xmlDoc$getElementsBy11","_xmlDoc$getElementsBy12","city","id","textContent","name","coordinates","x","parseFloat","y","creationDate","Date","area","population","parseInt","metersAboveSeaLevel","establishmentDate","capital","government","governor","height","birthday","human","Array","from","map","humanElement","_humanElement$getElem","_humanElement$getElem2","prev","error","console","direction","spacing","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaabakumova/SOA/frontend/src/Components/GetGovernmentButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { City } from '../models/City'; // Импортируем City\nimport { Government } from '../models/Government'; // Импортируем Government\nimport {useEffect, useState} from 'react';\n\ninterface ButtonsProps {\n  inputValue: string;\n  onCityUpdate: (city: City[]) => void; \n}\n\nconst GetGovernmentButton: React.FC<ButtonsProps> = ({ inputValue, onCityUpdate }) => {\n  const [cities, setCities] = useState<City[]>([]);\n\n    const handleButtonClick = async () => {\n    try {\n      const response = await fetch(`http://localhost:9991/api/external/government?type=${inputValue}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await response.text(); \n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\"); \n      const ids = xmlDoc.getElementsByTagName(\"id\");\n      const n = ids.length;\n      for (var i = 0; i < n; i++){\n        const city: City = {\n          id: xmlDoc.getElementsByTagName(\"id\")[i]?.textContent || '',\n          name: xmlDoc.getElementsByTagName(\"name\")[i]?.textContent || '',\n          coordinates: {\n            x: parseFloat(xmlDoc.getElementsByTagName(\"x\")[i]?.textContent || '0'),\n            y: parseFloat(xmlDoc.getElementsByTagName(\"y\")[i]?.textContent || '0'),\n          },\n          creationDate: new Date(xmlDoc.getElementsByTagName(\"creationDate\")[i].textContent || 0),\n          area: parseFloat(xmlDoc.getElementsByTagName(\"area\")[i]?.textContent || '0'),\n          population: parseInt(xmlDoc.getElementsByTagName(\"population\")[i]?.textContent || '0'),\n          metersAboveSeaLevel: parseFloat(xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[i]?.textContent || '0'),\n          establishmentDate: new Date(xmlDoc.getElementsByTagName(\"establishmentDate\")[i]?.textContent || 0),\n          capital: xmlDoc.getElementsByTagName(\"capital\")[i]?.textContent === 'true',\n          government: xmlDoc.getElementsByTagName(\"government\")[i]?.textContent as Government, // Указываем тип Government\n          governor: {\n            height: parseFloat(xmlDoc.getElementsByTagName(\"height\")[i]?.textContent || '0'),\n            birthday: new Date(xmlDoc.getElementsByTagName(\"birthday\")[i]?.textContent || 0),\n          },\n          human: Array.from(xmlDoc.getElementsByTagName(\"inhabitant\")).map(humanElement => ({\n            height: parseFloat(humanElement.getElementsByTagName(\"height\")[0]?.textContent || '0'),\n            birthday: new Date(humanElement.getElementsByTagName(\"birthday\")[0]?.textContent || 0),\n          })),\n      }\n      setCities((prev) => [...prev, ...[city]]);\n      };\n\n      // Передаем полученный объект обратно в TableCity или другой компонент\n      onCityUpdate(cities);\n      \n    } catch (error) {\n      console.error('Error fetching city data:', error);\n    }\n  };\n\n\n  return (\n    <Stack direction=\"row\" spacing={2}>\n      <Button variant=\"outlined\" onClick={handleButtonClick}>Город c government меньше заданного</Button>\n    </Stack>\n  );\n}\nexport default GetGovernmentButton;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}