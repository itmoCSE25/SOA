{"ast":null,"code":"var _jsxFileName = \"/Users/irinaabakumova/SOA/frontend/src/pages/TableCity.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport { useEffect, useState } from 'react';\nimport * as xml2js from 'xml2js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'id',\n  label: 'ID',\n  minWidth: 50,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'name',\n  label: 'Name',\n  minWidth: 170,\n  align: 'right'\n}, {\n  id: 'area',\n  label: 'Area',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'population',\n  label: 'Population',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'metersAboveSeaLevel',\n  label: 'Meters Above Sea Level',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'government',\n  label: 'Government',\n  minWidth: 170,\n  align: 'right'\n}, {\n  id: 'governor',\n  label: 'Governor',\n  minWidth: 170,\n  align: 'right'\n}];\nvar Government = /*#__PURE__*/function (Government) {\n  Government[\"DESPOTISM\"] = \"DESPOTISM\";\n  Government[\"PATRIARCHY\"] = \"PATRIARCHY\";\n  Government[\"ETHNOCRACY\"] = \"ETHNOCRACY\";\n  return Government;\n}(Government || {});\nconst formatValue = value => {\n  if (value === null || value === undefined) {\n    return 'N/A'; // Обработка null и undefined\n  }\n  if (typeof value === 'number') {\n    return value.toLocaleString('en-US'); // Форматирование чисел\n  } else if (typeof value === 'boolean') {\n    return value ? 'Yes' : 'No'; // Преобразование булевых значений\n  } else if (value instanceof Date) {\n    return value.toLocaleDateString(); // Форматирование дат\n  } else if (typeof value === 'object') {\n    // Пример для Coordinates\n    if ('x' in value && 'y' in value) {\n      var _value$x;\n      return `(${(_value$x = value.x) !== null && _value$x !== void 0 ? _value$x : 0}, ${value.y})`; // Формат для Coordinates\n    }\n    // Пример для Human\n    if ('height' in value) {\n      var _value$height;\n      return `${(_value$height = value.height) !== null && _value$height !== void 0 ? _value$height : 'N/A'} cm`; // Формат для Human\n    }\n    return JSON.stringify(value); // Превратите объекты в строки\n  }\n  return String(value); // Преобразование других типов в строку\n};\nconst parseXML = xml => {\n  return new Promise((resolve, reject) => {\n    xml2js.parseString(xml, {\n      explicitArray: false\n    }, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\nexport default function TableCity() {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('http://localhost:9991/api/city'); // Замените на ваш URL\n        const xml = await response.text();\n        const data = await parseXML(xml);\n        setCities(data.cities); // Обновите состояние с данными городов\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n    fetchCities();\n  }, []);\n\n  /*useEffect(() => {\n    const fetchCities = async () => {\n        const requestData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <CitiesRequest>\n  <page>${page + 1}</page>\n  <pageSize>${rowsPerPage}</pageSize>\n  <SortingStrategy>\n    <sortingType>asc</sortingType>\n    <sortingColumn>id</sortingColumn>\n  </SortingStrategy>\n  <FilterStrategy>\n    <filterColumn>id</filterColumn>\n    <filterType>contains</filterType>\n    <filterValue>string</filterValue>\n  </FilterStrategy>\n  </CitiesRequest>`;\n         try {\n            const response = await axios.post('http://localhost:9991/api/city', requestData, {\n                headers: {\n                    'Content-Type': 'application/xml',\n                },\n            });\n            \n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(response.data, \"application/xml\");\n            const fetchedCities: City[] = Array.from(xmlDoc.getElementsByTagName('City')).map(cityElement => ({\n                id: cityElement.getElementsByTagName('id')[0].textContent || '',\n                name: cityElement.getElementsByTagName('name')[0].textContent || '',\n                coordinates: {\n                    x: Number(cityElement.getElementsByTagName('x')[0]?.textContent) || 0, // Значение по умолчанию\n                    y: Number(cityElement.getElementsByTagName('y')[0]?.textContent) || 0, // Значение по умолчанию\n                },\n                creationDate: new Date(cityElement.getElementsByTagName('creationDate')[0]?.textContent || 0), // установка значения по умолчанию\n                area: Number(cityElement.getElementsByTagName('area')[0]?.textContent) || 0, // Значение по умолчанию\n                population: Number(cityElement.getElementsByTagName('population')[0]?.textContent) || 0, // Значение по умолчанию\n                metersAboveSeaLevel: Number(cityElement.getElementsByTagName('metersAboveSeaLevel')[0]?.textContent) || 0, // Значение по умолчанию\n                capital: cityElement.getElementsByTagName('capital')[0]?.textContent === 'true',\n                government: cityElement.getElementsByTagName('government')[0]?.textContent as Government || Government.DESPOTISM, // Значение по умолчанию\n                governor: {\n                    height: Number(cityElement.getElementsByTagName('Human')[0]?.getElementsByTagName('height')[0]?.textContent) || 0,\n                    birthday: new Date(cityElement.getElementsByTagName('Human')[0]?.getElementsByTagName('birthday')[0]?.textContent || 0), // установка значения по умолчанию\n                },\n            }));\n        \n            \n            setCities(fetchedCities);\n        } catch (error) {\n            console.error(\"Error fetching cities:\", error);\n        }\n    };\n    fetchCities();\n  }, [page, rowsPerPage]);*/\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      width: '100%',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: cities.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(city => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = city[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: formatValue(value)\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 37\n                }, this);\n              })\n            }, city.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: cities.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s(TableCity, \"XO3vxbXl4lfA6dhvIGgc0M3bacE=\");\n_c = TableCity;\nvar _c;\n$RefreshReg$(_c, \"TableCity\");","map":{"version":3,"names":["React","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","useEffect","useState","xml2js","jsxDEV","_jsxDEV","columns","id","label","minWidth","align","format","value","toLocaleString","Government","formatValue","undefined","Date","toLocaleDateString","_value$x","x","y","_value$height","height","JSON","stringify","String","parseXML","xml","Promise","resolve","reject","parseString","explicitArray","err","result","TableCity","_s","cities","setCities","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","fetchCities","response","fetch","text","data","error","console","sx","width","overflow","children","maxHeight","stickyHeader","map","column","style","fileName","_jsxFileName","lineNumber","columnNumber","slice","city","hover","role","tabIndex","rowsPerPageOptions","component","count","length","onPageChange","onRowsPerPageChange","_c","$RefreshReg$"],"sources":["/Users/irinaabakumova/SOA/frontend/src/pages/TableCity.tsx"],"sourcesContent":["import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport axios from 'axios';\nimport {useEffect, useState} from 'react';\nimport * as xml2js from 'xml2js';\n\ninterface Column {\n  id: keyof City;  \n  label: string;\n  minWidth?: number;\n  align?: 'right';\n  format?: (value: number) => string;\n}\n\nconst columns: readonly Column[] = [\n  { id: 'id',\n    label: 'ID', \n    minWidth: 50, \n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  { id: 'name',\n    label: 'Name', \n    minWidth: 170, \n    align: 'right'\n  },\n  {\n    id: 'area',\n    label: 'Area',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'metersAboveSeaLevel',\n    label: 'Meters Above Sea Level',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'government',\n    label: 'Government',\n    minWidth: 170,\n    align: 'right',\n  },\n  {\n    id: 'governor',\n    label: 'Governor',\n    minWidth: 170,\n    align: 'right',\n  },\n];\ninterface CitiesWithPagerDto {\n    cities: City[];\n    pager: {\n        totalPages: number;\n        pageNum: number;\n    };\n}\n\ninterface City {\n    id: string;\n    name: string;\n    coordinates: Coordinates;\n    creationDate: Date;\n    area: number;\n    population?: number;\n    establishmentDate?: Date;\n    metersAboveSeaLevel?: number;\n    capital: boolean;\n    government: Government;\n    governor: Human;\n}\n\n\ninterface Coordinates {\n    x?: number;\n    y: number;\n}\n\nenum Government {\n    DESPOTISM = \"DESPOTISM\",\n    PATRIARCHY = \"PATRIARCHY\",\n    ETHNOCRACY = \"ETHNOCRACY\",\n}\n\ninterface Human{\n    height?: number;\n    birthday?: Date;\n}\n\nconst formatValue = (value: any) => {\n    if (value === null || value === undefined) {\n        return 'N/A'; // Обработка null и undefined\n    }\n    \n    if (typeof value === 'number') {\n        return value.toLocaleString('en-US'); // Форматирование чисел\n    } else if (typeof value === 'boolean') {\n        return value ? 'Yes' : 'No'; // Преобразование булевых значений\n    } else if (value instanceof Date) {\n        return value.toLocaleDateString(); // Форматирование дат\n    } else if (typeof value === 'object') {\n        // Пример для Coordinates\n        if ('x' in value && 'y' in value) {\n            return `(${value.x ?? 0}, ${value.y})`; // Формат для Coordinates\n        }\n        // Пример для Human\n        if ('height' in value) {\n            return `${value.height ?? 'N/A'} cm`; // Формат для Human\n        }\n        return JSON.stringify(value); // Превратите объекты в строки\n    }\n    \n    return String(value); // Преобразование других типов в строку\n};\n\nconst parseXML = (xml: string) => {\n    return new Promise<CitiesWithPagerDto>((resolve, reject) => {\n        xml2js.parseString(xml, { explicitArray: false }, (err, result) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(result as CitiesWithPagerDto);\n            }\n        });\n    });\n};\n\n\n\nexport default function TableCity() {\n    const [cities, setCities] = useState<City[]>([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  useEffect(() => {\n    const fetchCities = async () => {\n        try {\n            const response = await fetch('http://localhost:9991/api/city'); // Замените на ваш URL\n            const xml = await response.text();\n            const data = await parseXML(xml);\n            setCities(data.cities); // Обновите состояние с данными городов\n        } catch (error) {\n            console.error(\"Error fetching cities:\", error);\n        }\n    };\n\n    fetchCities();\n}, []);\n\n  /*useEffect(() => {\n    const fetchCities = async () => {\n        const requestData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CitiesRequest>\n<page>${page + 1}</page>\n<pageSize>${rowsPerPage}</pageSize>\n<SortingStrategy>\n    <sortingType>asc</sortingType>\n    <sortingColumn>id</sortingColumn>\n</SortingStrategy>\n<FilterStrategy>\n    <filterColumn>id</filterColumn>\n    <filterType>contains</filterType>\n    <filterValue>string</filterValue>\n</FilterStrategy>\n</CitiesRequest>`;\n\n        try {\n            const response = await axios.post('http://localhost:9991/api/city', requestData, {\n                headers: {\n                    'Content-Type': 'application/xml',\n                },\n            });\n            \n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(response.data, \"application/xml\");\n            const fetchedCities: City[] = Array.from(xmlDoc.getElementsByTagName('City')).map(cityElement => ({\n                id: cityElement.getElementsByTagName('id')[0].textContent || '',\n                name: cityElement.getElementsByTagName('name')[0].textContent || '',\n                coordinates: {\n                    x: Number(cityElement.getElementsByTagName('x')[0]?.textContent) || 0, // Значение по умолчанию\n                    y: Number(cityElement.getElementsByTagName('y')[0]?.textContent) || 0, // Значение по умолчанию\n                },\n                creationDate: new Date(cityElement.getElementsByTagName('creationDate')[0]?.textContent || 0), // установка значения по умолчанию\n                area: Number(cityElement.getElementsByTagName('area')[0]?.textContent) || 0, // Значение по умолчанию\n                population: Number(cityElement.getElementsByTagName('population')[0]?.textContent) || 0, // Значение по умолчанию\n                metersAboveSeaLevel: Number(cityElement.getElementsByTagName('metersAboveSeaLevel')[0]?.textContent) || 0, // Значение по умолчанию\n                capital: cityElement.getElementsByTagName('capital')[0]?.textContent === 'true',\n                government: cityElement.getElementsByTagName('government')[0]?.textContent as Government || Government.DESPOTISM, // Значение по умолчанию\n                governor: {\n                    height: Number(cityElement.getElementsByTagName('Human')[0]?.getElementsByTagName('height')[0]?.textContent) || 0,\n                    birthday: new Date(cityElement.getElementsByTagName('Human')[0]?.getElementsByTagName('birthday')[0]?.textContent || 0), // установка значения по умолчанию\n                },\n            }));\n        \n            \n            setCities(fetchedCities);\n        } catch (error) {\n            console.error(\"Error fetching cities:\", error);\n        }\n    };\n    fetchCities();\n}, [page, rowsPerPage]);*/\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {cities\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((city) => {\n                    return (\n                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={city.id}>\n                            {columns.map((column) => {\n                                const value = city[column.id];\n                                return (\n                                    <TableCell key={column.id} align={column.align}>\n                                        {formatValue(value)}\n                                    </TableCell>\n                                );\n                            })}\n                        </TableRow>\n                    );\n                })}\n        </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={cities.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}