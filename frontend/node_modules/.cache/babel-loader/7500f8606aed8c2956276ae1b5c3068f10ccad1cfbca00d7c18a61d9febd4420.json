{"ast":null,"code":"var _jsxFileName = \"/Users/irinaabakumova/SOA/frontend/src/Components/Buttons.tsx\";\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n// Импортируем City\n// Импортируем Coordinates\n// Импортируем Government\n// Импортируем Human\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Buttons = ({\n  inputValue,\n  onCityUpdate\n}) => {\n  const handleButtonClick = async () => {\n    try {\n      var _xmlDoc$getElementsBy, _xmlDoc$getElementsBy2, _xmlDoc$getElementsBy3, _xmlDoc$getElementsBy4, _xmlDoc$getElementsBy5, _xmlDoc$getElementsBy6, _xmlDoc$getElementsBy7, _xmlDoc$getElementsBy8, _xmlDoc$getElementsBy9, _xmlDoc$getElementsBy10, _xmlDoc$getElementsBy11;\n      const response = await fetch(`http://localhost:9991/api/city/${inputValue}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await response.text(); // Получите ответ в текстовом формате\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\"); // Парсим XML\n\n      // Извлечение данных из XML\n      const city = {\n        id: (_xmlDoc$getElementsBy = xmlDoc.getElementsByTagName(\"id\")[0]) === null || _xmlDoc$getElementsBy === void 0 ? void 0 : _xmlDoc$getElementsBy.textContent,\n        name: (_xmlDoc$getElementsBy2 = xmlDoc.getElementsByTagName(\"name\")[0]) === null || _xmlDoc$getElementsBy2 === void 0 ? void 0 : _xmlDoc$getElementsBy2.textContent,\n        coordinates: {\n          x: parseFloat(((_xmlDoc$getElementsBy3 = xmlDoc.getElementsByTagName(\"x\")[0]) === null || _xmlDoc$getElementsBy3 === void 0 ? void 0 : _xmlDoc$getElementsBy3.textContent) || '0'),\n          y: parseFloat(((_xmlDoc$getElementsBy4 = xmlDoc.getElementsByTagName(\"y\")[0]) === null || _xmlDoc$getElementsBy4 === void 0 ? void 0 : _xmlDoc$getElementsBy4.textContent) || '0')\n        },\n        creationDate: new Date(((_xmlDoc$getElementsBy5 = xmlDoc.getElementsByTagName(\"creationDate\")[0]) === null || _xmlDoc$getElementsBy5 === void 0 ? void 0 : _xmlDoc$getElementsBy5.textContent) || ''),\n        area: parseFloat(((_xmlDoc$getElementsBy6 = xmlDoc.getElementsByTagName(\"area\")[0]) === null || _xmlDoc$getElementsBy6 === void 0 ? void 0 : _xmlDoc$getElementsBy6.textContent) || '0'),\n        population: parseInt(((_xmlDoc$getElementsBy7 = xmlDoc.getElementsByTagName(\"population\")[0]) === null || _xmlDoc$getElementsBy7 === void 0 ? void 0 : _xmlDoc$getElementsBy7.textContent) || '0'),\n        metersAboveSeaLevel: parseFloat(((_xmlDoc$getElementsBy8 = xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[0]) === null || _xmlDoc$getElementsBy8 === void 0 ? void 0 : _xmlDoc$getElementsBy8.textContent) || '0'),\n        establishmentDate: new Date(((_xmlDoc$getElementsBy9 = xmlDoc.getElementsByTagName(\"establishmentDate\")[0]) === null || _xmlDoc$getElementsBy9 === void 0 ? void 0 : _xmlDoc$getElementsBy9.textContent) || ''),\n        capital: ((_xmlDoc$getElementsBy10 = xmlDoc.getElementsByTagName(\"capital\")[0]) === null || _xmlDoc$getElementsBy10 === void 0 ? void 0 : _xmlDoc$getElementsBy10.textContent) === 'true',\n        government: (_xmlDoc$getElementsBy11 = xmlDoc.getElementsByTagName(\"government\")[0]) === null || _xmlDoc$getElementsBy11 === void 0 ? void 0 : _xmlDoc$getElementsBy11.textContent,\n        human: Array.from(xmlDoc.getElementsByTagName(\"Human\")).map(human => {\n          var _human$getElementsByT, _human$getElementsByT2;\n          return {\n            height: parseFloat(((_human$getElementsByT = human.getElementsByTagName(\"height\")[0]) === null || _human$getElementsByT === void 0 ? void 0 : _human$getElementsByT.textContent) || '0'),\n            birthday: new Date(((_human$getElementsByT2 = human.getElementsByTagName(\"birthday\")[0]) === null || _human$getElementsByT2 === void 0 ? void 0 : _human$getElementsByT2.textContent) || '')\n          };\n        })\n      };\n      // Передаем полученный объект обратно в TableCity или другой компонент\n      onCityUpdate(city);\n    } catch (error) {\n      console.error('Error fetching city data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleButtonClick,\n      children: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = Buttons;\nexport default Buttons;\nvar _c;\n$RefreshReg$(_c, \"Buttons\");","map":{"version":3,"names":["React","Button","Stack","jsxDEV","_jsxDEV","Buttons","inputValue","onCityUpdate","handleButtonClick","_xmlDoc$getElementsBy","_xmlDoc$getElementsBy2","_xmlDoc$getElementsBy3","_xmlDoc$getElementsBy4","_xmlDoc$getElementsBy5","_xmlDoc$getElementsBy6","_xmlDoc$getElementsBy7","_xmlDoc$getElementsBy8","_xmlDoc$getElementsBy9","_xmlDoc$getElementsBy10","_xmlDoc$getElementsBy11","response","fetch","ok","Error","xmlText","text","parser","DOMParser","xmlDoc","parseFromString","city","id","getElementsByTagName","textContent","name","coordinates","x","parseFloat","y","creationDate","Date","area","population","parseInt","metersAboveSeaLevel","establishmentDate","capital","government","human","Array","from","map","_human$getElementsByT","_human$getElementsByT2","height","birthday","error","console","direction","spacing","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaabakumova/SOA/frontend/src/Components/Buttons.tsx"],"sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { City } from '../models/City'; // Импортируем City\nimport { Coordinates } from '../models/Coordinates'; // Импортируем Coordinates\nimport { Government } from '../models/Government'; // Импортируем Government\nimport { Human } from '../models/Human'; // Импортируем Human\n\ninterface ButtonsProps {\n  inputValue: string;\n  onCityUpdate: (city: City) => void; \n}\n\nconst Buttons: React.FC<ButtonsProps> = ({ inputValue, onCityUpdate }) => {\n  const handleButtonClick = async () => {\n      try {\n          const response = await fetch(`http://localhost:9991/api/city/${inputValue}`);\n          if (!response.ok) {\n              throw new Error('Network response was not ok');\n          }\n          const xmlText = await response.text(); // Получите ответ в текстовом формате\n          const parser = new DOMParser();\n          const xmlDoc = parser.parseFromString(xmlText, \"text/xml\"); // Парсим XML\n\n          // Извлечение данных из XML\n          const city = {\n              id: xmlDoc.getElementsByTagName(\"id\")[0]?.textContent,\n              name: xmlDoc.getElementsByTagName(\"name\")[0]?.textContent,\n              coordinates: {\n                  x: parseFloat(xmlDoc.getElementsByTagName(\"x\")[0]?.textContent || '0'),\n                  y: parseFloat(xmlDoc.getElementsByTagName(\"y\")[0]?.textContent || '0'),\n              },\n              creationDate: new Date(xmlDoc.getElementsByTagName(\"creationDate\")[0]?.textContent || ''),\n              area: parseFloat(xmlDoc.getElementsByTagName(\"area\")[0]?.textContent || '0'),\n              population: parseInt(xmlDoc.getElementsByTagName(\"population\")[0]?.textContent || '0'),\n              metersAboveSeaLevel: parseFloat(xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[0]?.textContent || '0'),\n              establishmentDate: new Date(xmlDoc.getElementsByTagName(\"establishmentDate\")[0]?.textContent || ''),\n              capital: xmlDoc.getElementsByTagName(\"capital\")[0]?.textContent === 'true',\n              government: xmlDoc.getElementsByTagName(\"government\")[0]?.textContent,\n              human: Array.from(xmlDoc.getElementsByTagName(\"Human\")).map((human: any) => ({\n                  height: parseFloat(human.getElementsByTagName(\"height\")[0]?.textContent || '0'),\n                  birthday: new Date(human.getElementsByTagName(\"birthday\")[0]?.textContent || '')\n              })),\n          };\n          // Передаем полученный объект обратно в TableCity или другой компонент\n          onCityUpdate(city);\n        } catch (error) {\n            console.error('Error fetching city data:', error);\n        }\n    };\n\n\n  return (\n    <Stack direction=\"row\" spacing={2}>\n      <Button variant=\"outlined\" onClick={handleButtonClick}>Получить город</Button>\n    </Stack>\n  );\n}\nexport default Buttons;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}