{"ast":null,"code":"var _jsxFileName = \"/Users/irinaabakumova/SOA/frontend/src/Components/TableCity.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Input from \"../Components/Input\";\nimport GetCityButton from \"./GetCityButton\";\nimport { Government } from '../models/Government';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Modal from '../Modal/modal';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'id',\n  label: 'ID',\n  minWidth: 50,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'name',\n  label: 'Name',\n  minWidth: 170,\n  align: 'right'\n}, {\n  id: 'area',\n  label: 'Area',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'coordinates',\n  label: 'Coordinates',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'population',\n  label: 'Population',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'metersAboveSeaLevel',\n  label: 'Meters Above Sea Level',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'government',\n  label: 'Government',\n  minWidth: 170,\n  align: 'right'\n}, {\n  id: 'governor',\n  label: 'Governor',\n  minWidth: 170,\n  align: 'right'\n}];\nconst formatValue = value => {\n  if (value === null || value === undefined) {\n    return 'N/A'; // Обработка null и undefined\n  }\n  if (typeof value === 'number') {\n    return value.toLocaleString('en-US'); // Форматирование чисел\n  } else if (typeof value === 'boolean') {\n    return value ? 'Yes' : 'No'; // Преобразование булевых значений\n  } else if (value instanceof Date) {\n    return value.toLocaleDateString(); // Форматирование дат\n  } else if (typeof value === 'object') {\n    // Пример для Coordinates\n    if ('x' in value && 'y' in value) {\n      var _value$x;\n      return `(${(_value$x = value.x) !== null && _value$x !== void 0 ? _value$x : 0}, ${value.y})`; // Формат для Coordinates\n    }\n    // Пример для Human\n    if ('height' in value) {\n      var _value$height;\n      return `${(_value$height = value.height) !== null && _value$height !== void 0 ? _value$height : 'N/A'} cm`; // Формат для Human\n    }\n    return JSON.stringify(value); // Превратите объекты в строки\n  }\n  return String(value); // Преобразование других типов в строку\n};\nconst TableCity = () => {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [modalActive, setModalActive] = useState(false);\n  const [name, setName] = useState('');\n  const [coordinates, setCoordinates] = useState([]);\n  const [creationDate, setCreationDatee] = useState('');\n  const [area, setArea] = useState('');\n  const [population, setPopulation] = useState('');\n  const [metersAboveSeaLevel, setMetersAboveSeaLevel] = useState('');\n  const [establishmentDate, setEstablishmentDate] = useState('');\n  const [capital, setCapital] = useState('');\n  const [government, setGovernment] = useState(null);\n  const [governor, setGovernor] = useState([]);\n  const [x, setX] = useState('');\n  const [y, setY] = useState('');\n  const [height, setHeight] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const handleCityUpdate = newCity => {\n    setCities([newCity]);\n  };\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  const handleInputChange = value => {\n    setInputValue(value);\n  };\n  const handleButtonClick = async () => {\n    try {\n      const response = await fetch(`http://localhost:9991/api/city/${inputValue}`, {\n        method: 'DELETE' // Указываем метод DELETE\n      });\n      if (response.ok) {\n        console.log('City successfully deleted');\n        fetchCities();\n      } else if (response.status === 400) {\n        console.error(\"Can't find city with such id\");\n      } else if (response.status >= 500) {\n        console.error('Internal server error');\n      }\n    } catch (error) {\n      console.error('Error deleting city:', error);\n    }\n  };\n  const fetchUpdateCity = async () => {\n    const requestData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <City>\n          <id>${inputValue}</id>\n          <name>${name}</name>\n          <Coordinates>\n            <x>${x}</x>\n            <y>${y}</y>\n          </Coordinates>\n          <creationDate>2024-11-20T07:33:15.528Z</creationDate>\n          <area>${area}</area>\n          <population>${population}</population>\n          <metersAboveSeaLevel>${metersAboveSeaLevel}</metersAboveSeaLevel>\n          <establishmentDate>2024-11-20T07:33:15.528Z</establishmentDate>\n          <capital>${capital}</capital>\n          <government>${government}</government>\n          <Human>\n            <height>${height}</height>\n            <birthday>${birthday}</birthday>\n          </Human>\n          <Human>\n            <height>${height}</height>\n            <birthday>${birthday}</birthday>\n          </Human>\n        </City>`;\n    try {\n      var _xmlDoc$getElementsBy, _xmlDoc$getElementsBy2, _xmlDoc$getElementsBy3, _xmlDoc$getElementsBy4, _xmlDoc$getElementsBy5, _xmlDoc$getElementsBy6, _xmlDoc$getElementsBy7, _xmlDoc$getElementsBy8, _xmlDoc$getElementsBy9, _xmlDoc$getElementsBy10, _xmlDoc$getElementsBy11, _xmlDoc$getElementsBy12;\n      const response = await fetch(`http://localhost:9991/api/city/${inputValue}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/xml'\n        },\n        body: requestData\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const xmlText = await response.text(); // Получите ответ в текстовом формате\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, \"text/xml\"); // Парсим XML\n\n      // Извлечение данных из XML и создание объекта city с использованием интерфейса City\n      const city = {\n        id: ((_xmlDoc$getElementsBy = xmlDoc.getElementsByTagName(\"id\")[0]) === null || _xmlDoc$getElementsBy === void 0 ? void 0 : _xmlDoc$getElementsBy.textContent) || '',\n        name: ((_xmlDoc$getElementsBy2 = xmlDoc.getElementsByTagName(\"name\")[0]) === null || _xmlDoc$getElementsBy2 === void 0 ? void 0 : _xmlDoc$getElementsBy2.textContent) || '',\n        coordinates: {\n          x: xmlDoc.getElementsByTagName(\"x\")[0].textContent || '',\n          y: ((_xmlDoc$getElementsBy3 = xmlDoc.getElementsByTagName(\"y\")[0]) === null || _xmlDoc$getElementsBy3 === void 0 ? void 0 : _xmlDoc$getElementsBy3.textContent) || ''\n        },\n        creationDate: new Date(((_xmlDoc$getElementsBy4 = xmlDoc.getElementsByTagName(\"creationDate\")[0]) === null || _xmlDoc$getElementsBy4 === void 0 ? void 0 : _xmlDoc$getElementsBy4.textContent) || ''),\n        area: ((_xmlDoc$getElementsBy5 = xmlDoc.getElementsByTagName(\"area\")[0]) === null || _xmlDoc$getElementsBy5 === void 0 ? void 0 : _xmlDoc$getElementsBy5.textContent) || '',\n        population: ((_xmlDoc$getElementsBy6 = xmlDoc.getElementsByTagName(\"population\")[0]) === null || _xmlDoc$getElementsBy6 === void 0 ? void 0 : _xmlDoc$getElementsBy6.textContent) || '',\n        metersAboveSeaLevel: ((_xmlDoc$getElementsBy7 = xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[0]) === null || _xmlDoc$getElementsBy7 === void 0 ? void 0 : _xmlDoc$getElementsBy7.textContent) || '',\n        establishmentDate: new Date(((_xmlDoc$getElementsBy8 = xmlDoc.getElementsByTagName(\"establishmentDate\")[0]) === null || _xmlDoc$getElementsBy8 === void 0 ? void 0 : _xmlDoc$getElementsBy8.textContent) || ''),\n        capital: ((_xmlDoc$getElementsBy9 = xmlDoc.getElementsByTagName(\"capital\")[0]) === null || _xmlDoc$getElementsBy9 === void 0 ? void 0 : _xmlDoc$getElementsBy9.textContent) === 'true',\n        government: (_xmlDoc$getElementsBy10 = xmlDoc.getElementsByTagName(\"government\")[0]) === null || _xmlDoc$getElementsBy10 === void 0 ? void 0 : _xmlDoc$getElementsBy10.textContent,\n        // Указываем тип Government\n        governor: {\n          height: ((_xmlDoc$getElementsBy11 = xmlDoc.getElementsByTagName(\"height\")[0]) === null || _xmlDoc$getElementsBy11 === void 0 ? void 0 : _xmlDoc$getElementsBy11.textContent) || '',\n          birthday: new Date(((_xmlDoc$getElementsBy12 = xmlDoc.getElementsByTagName(\"birthday\")[0]) === null || _xmlDoc$getElementsBy12 === void 0 ? void 0 : _xmlDoc$getElementsBy12.textContent) || '')\n        }\n      };\n      fetchCities();\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n  const fetchCities = async () => {\n    const requestData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <CitiesRequest>\n        <page>${page + 1}</page>\n        <pageSize>${rowsPerPage}</pageSize>\n        <SortingStrategy>\n        <sortingType>asc</sortingType>\n        <sortingColumn>id</sortingColumn>\n        </SortingStrategy>\n        <FilterStrategy>\n        <filterColumn>id</filterColumn>\n        <filterType>contains</filterType>\n        <filterValue>string</filterValue>\n        </FilterStrategy>\n        </CitiesRequest>`;\n    try {\n      const response = await axios.post('http://localhost:9991/api/city', requestData, {\n        headers: {\n          'Content-Type': 'application/xml'\n        }\n      });\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"application/xml\");\n      const fetchedCities = Array.from(xmlDoc.getElementsByTagName('cities')).map(cityElement => {\n        var _cityElement$getEleme, _cityElement$getEleme2, _cityElement$getEleme3, _cityElement$getEleme4, _cityElement$getEleme5;\n        return {\n          id: cityElement.getElementsByTagName('id')[0].textContent || '',\n          name: cityElement.getElementsByTagName('name')[0].textContent || '',\n          coordinates: {\n            x: cityElement.getElementsByTagName('x')[0].textContent || '',\n            y: cityElement.getElementsByTagName('y')[0].textContent || ''\n          },\n          creationDate: new Date(((_cityElement$getEleme = cityElement.getElementsByTagName('creationDate')[0]) === null || _cityElement$getEleme === void 0 ? void 0 : _cityElement$getEleme.textContent) || Date.now()),\n          // Значение по умолчанию на текущую дату\n          area: cityElement.getElementsByTagName('area')[0].textContent || '',\n          population: cityElement.getElementsByTagName('population')[0].textContent || '',\n          metersAboveSeaLevel: cityElement.getElementsByTagName('population')[0].textContent || '',\n          capital: ((_cityElement$getEleme2 = cityElement.getElementsByTagName('capital')[0]) === null || _cityElement$getEleme2 === void 0 ? void 0 : _cityElement$getEleme2.textContent) === 'true',\n          government: ((_cityElement$getEleme3 = cityElement.getElementsByTagName('government')[0]) === null || _cityElement$getEleme3 === void 0 ? void 0 : _cityElement$getEleme3.textContent) || Government.DESPOTISM,\n          governor: {\n            height: cityElement.getElementsByTagName('height')[0].textContent || '',\n            birthday: new Date(((_cityElement$getEleme4 = cityElement.getElementsByTagName('Human')[0]) === null || _cityElement$getEleme4 === void 0 ? void 0 : (_cityElement$getEleme5 = _cityElement$getEleme4.getElementsByTagName('birthday')[0]) === null || _cityElement$getEleme5 === void 0 ? void 0 : _cityElement$getEleme5.textContent) || Date.now()) // Значение по умолчанию на текущую дату\n          }\n        };\n      });\n      setCities(fetchedCities);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchCities();\n  }, [page, rowsPerPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      text: \"ID\",\n      value: inputValue,\n      onInputChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetCityButton, {\n      inputValue: inputValue,\n      onCityUpdate: handleCityUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleButtonClick,\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: () => {\n          setModalActive(true);\n          setName(cities[Number(inputValue)].name);\n          setArea(cities[Number(inputValue)].area);\n          setX(cities[Number(inputValue)].coordinates.x);\n          setY(cities[Number(inputValue)].coordinates.y);\n        },\n        children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        width: '100%',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n        sx: {\n          maxHeight: 440\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          stickyHeader: true,\n          \"aria-label\": \"sticky table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n                align: column.align,\n                style: {\n                  minWidth: column.minWidth\n                },\n                children: column.label\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: cities.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(city => {\n              return /*#__PURE__*/_jsxDEV(TableRow, {\n                hover: true,\n                role: \"checkbox\",\n                tabIndex: -1,\n                children: columns.map(column => {\n                  const value = city[column.id];\n                  return /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: column.align,\n                    children: formatValue(value)\n                  }, column.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 39\n                  }, this);\n                })\n              }, city.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 27\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n        rowsPerPageOptions: [1, 2, 3],\n        component: \"div\",\n        count: cities.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onPageChange: handleChangePage,\n        onRowsPerPageChange: handleChangeRowsPerPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: modalActive,\n      setActive: setModalActive,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                text: \"Name\",\n                value: name,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                text: \"Area\",\n                value: area,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                text: \"X\",\n                value: x,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                text: \"Y\",\n                value: y,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                text: \"Population\",\n                value: population,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                text: \"Meters Above Sea Level\",\n                value: metersAboveSeaLevel,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                text: \"Governor Birthday\",\n                value: birthday,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                text: \"Governor Height\",\n                value: height,\n                onInputChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n};\n_s(TableCity, \"+h8nkZMLxfzXVpzmcs8KS/JwHI4=\");\n_c = TableCity;\nexport default TableCity;\nvar _c;\n$RefreshReg$(_c, \"TableCity\");","map":{"version":3,"names":["React","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","axios","useEffect","useState","Input","GetCityButton","Government","Button","Stack","Modal","List","ListItem","ListItemButton","jsxDEV","_jsxDEV","columns","id","label","minWidth","align","format","value","toLocaleString","formatValue","undefined","Date","toLocaleDateString","_value$x","x","y","_value$height","height","JSON","stringify","String","TableCity","_s","cities","setCities","page","setPage","rowsPerPage","setRowsPerPage","inputValue","setInputValue","modalActive","setModalActive","name","setName","coordinates","setCoordinates","creationDate","setCreationDatee","area","setArea","population","setPopulation","metersAboveSeaLevel","setMetersAboveSeaLevel","establishmentDate","setEstablishmentDate","capital","setCapital","government","setGovernment","governor","setGovernor","setX","setY","setHeight","birthday","setBirthday","handleCityUpdate","newCity","handleChangePage","event","newPage","handleChangeRowsPerPage","target","handleInputChange","handleButtonClick","response","fetch","method","ok","console","log","fetchCities","status","error","fetchUpdateCity","requestData","_xmlDoc$getElementsBy","_xmlDoc$getElementsBy2","_xmlDoc$getElementsBy3","_xmlDoc$getElementsBy4","_xmlDoc$getElementsBy5","_xmlDoc$getElementsBy6","_xmlDoc$getElementsBy7","_xmlDoc$getElementsBy8","_xmlDoc$getElementsBy9","_xmlDoc$getElementsBy10","_xmlDoc$getElementsBy11","_xmlDoc$getElementsBy12","headers","body","Error","xmlText","text","parser","DOMParser","xmlDoc","parseFromString","city","getElementsByTagName","textContent","post","data","fetchedCities","Array","from","map","cityElement","_cityElement$getEleme","_cityElement$getEleme2","_cityElement$getEleme3","_cityElement$getEleme4","_cityElement$getEleme5","now","DESPOTISM","children","onInputChange","fileName","_jsxFileName","lineNumber","columnNumber","onCityUpdate","direction","spacing","variant","onClick","Number","sx","width","overflow","maxHeight","stickyHeader","column","style","slice","hover","role","tabIndex","rowsPerPageOptions","component","count","length","onPageChange","onRowsPerPageChange","active","setActive","_c","$RefreshReg$"],"sources":["/Users/irinaabakumova/SOA/frontend/src/Components/TableCity.tsx"],"sourcesContent":["import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport axios from 'axios';\nimport {useEffect, useState} from 'react';\nimport Input from \"../Components/Input\";\nimport GetCityButton from \"./GetCityButton\";\nimport { City } from '../models/City'; \nimport { Government } from '../models/Government'; \nimport { Coordinates } from '../models/Coordinates';\nimport { Human } from '../models/Human';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Modal from '../Modal/modal';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\ninterface Column {\n  id: keyof City;  \n  label: string;\n  minWidth?: number;\n  align?: 'right';\n  format?: (value: number) => string;\n}\n\nconst columns: readonly Column[] = [\n  { id: 'id',\n    label: 'ID', \n    minWidth: 50, \n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  { id: 'name',\n    label: 'Name', \n    minWidth: 170, \n    align: 'right'\n  },\n  {\n    id: 'area',\n    label: 'Area',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'coordinates',\n    label: 'Coordinates',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'metersAboveSeaLevel',\n    label: 'Meters Above Sea Level',\n    minWidth: 170,\n    align: 'right',\n    format: (value: number) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'government',\n    label: 'Government',\n    minWidth: 170,\n    align: 'right',\n  },\n  {\n    id: 'governor',\n    label: 'Governor',\n    minWidth: 170,\n    align: 'right',\n  },\n];\n\n\nconst formatValue = (value: any) => {\n    if (value === null || value === undefined) {\n        return 'N/A'; // Обработка null и undefined\n    }\n    \n    if (typeof value === 'number') {\n        return value.toLocaleString('en-US'); // Форматирование чисел\n    } else if (typeof value === 'boolean') {\n        return value ? 'Yes' : 'No'; // Преобразование булевых значений\n    } else if (value instanceof Date) {\n        return value.toLocaleDateString(); // Форматирование дат\n    } else if (typeof value === 'object') {\n        // Пример для Coordinates\n        if ('x' in value && 'y' in value) {\n            return `(${value.x ?? 0}, ${value.y})`; // Формат для Coordinates\n        }\n        // Пример для Human\n        if ('height' in value) {\n            return `${value.height ?? 'N/A'} cm`; // Формат для Human\n        }\n        return JSON.stringify(value); // Превратите объекты в строки\n    }\n    \n    return String(value); // Преобразование других типов в строку\n};\n\nconst TableCity: React.FC = () => {\n  const [cities, setCities] = useState<City[]>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [modalActive, setModalActive] = useState(false);\n  const [name, setName] = useState('');\n  const [coordinates, setCoordinates] = useState<Coordinates[]>([]);\n  const [creationDate, setCreationDatee] = useState('');\n  const [area, setArea] = useState('');\n  const [population, setPopulation] = useState('');\n  const [metersAboveSeaLevel, setMetersAboveSeaLevel] = useState('');\n  const [establishmentDate, setEstablishmentDate] = useState('');\n  const [capital, setCapital] = useState('');\n  const [government, setGovernment] = useState<Government | null>(null);\n  const [governor, setGovernor] = useState<Human[]>([]);\n  const [x, setX] = useState('');\n  const [y, setY] = useState('');\n  const [height, setHeight] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const handleCityUpdate = (newCity: City) => {\n    setCities([newCity]);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  \n\n  const handleInputChange = (value: string) => {\n      setInputValue(value);\n  };\n  const handleButtonClick = async () => {\n    try {\n      const response = await fetch(`http://localhost:9991/api/city/${inputValue}`, {\n        method: 'DELETE', // Указываем метод DELETE\n      });\n\n      if (response.ok) {\n        console.log('City successfully deleted');\n        fetchCities();\n      } else if (response.status === 400) {\n        console.error(\"Can't find city with such id\");\n      } else if (response.status >= 500) {\n        console.error('Internal server error');\n      }\n    } catch (error) {\n      console.error('Error deleting city:', error);\n    }\n  };\n\n\n  const fetchUpdateCity = async () => {\n    const requestData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <City>\n          <id>${inputValue}</id>\n          <name>${name}</name>\n          <Coordinates>\n            <x>${x}</x>\n            <y>${y}</y>\n          </Coordinates>\n          <creationDate>2024-11-20T07:33:15.528Z</creationDate>\n          <area>${area}</area>\n          <population>${population}</population>\n          <metersAboveSeaLevel>${metersAboveSeaLevel}</metersAboveSeaLevel>\n          <establishmentDate>2024-11-20T07:33:15.528Z</establishmentDate>\n          <capital>${capital}</capital>\n          <government>${government}</government>\n          <Human>\n            <height>${height}</height>\n            <birthday>${birthday}</birthday>\n          </Human>\n          <Human>\n            <height>${height}</height>\n            <birthday>${birthday}</birthday>\n          </Human>\n        </City>`;\n\n        try {\n          const response = await fetch(`http://localhost:9991/api/city/${inputValue}`, {\n            method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/xml',\n                },\n                body: requestData,\n              });\n          \n              if (!response.ok) {\n                throw new Error('Network response was not ok');\n              }\n              const xmlText = await response.text(); // Получите ответ в текстовом формате\n              const parser = new DOMParser();\n              const xmlDoc = parser.parseFromString(xmlText, \"text/xml\"); // Парсим XML\n        \n              // Извлечение данных из XML и создание объекта city с использованием интерфейса City\n              const city: City = {\n                id: xmlDoc.getElementsByTagName(\"id\")[0]?.textContent || '',\n                name: xmlDoc.getElementsByTagName(\"name\")[0]?.textContent || '',\n                coordinates: {\n                  x: xmlDoc.getElementsByTagName(\"x\")[0].textContent || '',\n                  y: xmlDoc.getElementsByTagName(\"y\")[0]?.textContent || '',\n                },\n                creationDate: new Date(xmlDoc.getElementsByTagName(\"creationDate\")[0]?.textContent || ''),\n                area: xmlDoc.getElementsByTagName(\"area\")[0]?.textContent || '',\n                population: xmlDoc.getElementsByTagName(\"population\")[0]?.textContent || '',\n                metersAboveSeaLevel: xmlDoc.getElementsByTagName(\"metersAboveSeaLevel\")[0]?.textContent || '',\n                establishmentDate: new Date(xmlDoc.getElementsByTagName(\"establishmentDate\")[0]?.textContent || ''),\n                capital: xmlDoc.getElementsByTagName(\"capital\")[0]?.textContent === 'true',\n                government: xmlDoc.getElementsByTagName(\"government\")[0]?.textContent as Government, // Указываем тип Government\n                governor: {\n                  height: xmlDoc.getElementsByTagName(\"height\")[0]?.textContent || '',\n                  birthday: new Date(xmlDoc.getElementsByTagName(\"birthday\")[0]?.textContent || ''),\n                },\n              };\n          \n          fetchCities();\n      } catch (error) {\n          console.error(\"Error fetching cities:\", error);\n      }\n    }\n\n  const fetchCities = async () => {\n    const requestData = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <CitiesRequest>\n        <page>${page + 1}</page>\n        <pageSize>${rowsPerPage}</pageSize>\n        <SortingStrategy>\n        <sortingType>asc</sortingType>\n        <sortingColumn>id</sortingColumn>\n        </SortingStrategy>\n        <FilterStrategy>\n        <filterColumn>id</filterColumn>\n        <filterType>contains</filterType>\n        <filterValue>string</filterValue>\n        </FilterStrategy>\n        </CitiesRequest>`;\n\n    try {\n        const response = await axios.post('http://localhost:9991/api/city', requestData, {\n            headers: {\n                'Content-Type': 'application/xml',\n            },\n        });\n        \n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(response.data, \"application/xml\");\n        const fetchedCities: City[] = Array.from(xmlDoc.getElementsByTagName('cities')).map(cityElement => ({\n          id: cityElement.getElementsByTagName('id')[0].textContent || '',\n          name: cityElement.getElementsByTagName('name')[0].textContent || '',\n          coordinates: {\n              x: cityElement.getElementsByTagName('x')[0].textContent || '',\n              y: cityElement.getElementsByTagName('y')[0].textContent || '',\n          },\n          creationDate: new Date(cityElement.getElementsByTagName('creationDate')[0]?.textContent || Date.now()), // Значение по умолчанию на текущую дату\n          area: cityElement.getElementsByTagName('area')[0].textContent || '', \n          population: cityElement.getElementsByTagName('population')[0].textContent || '', \n          metersAboveSeaLevel: cityElement.getElementsByTagName('population')[0].textContent || '', \n          capital: cityElement.getElementsByTagName('capital')[0]?.textContent === 'true',\n          government: cityElement.getElementsByTagName('government')[0]?.textContent as Government || Government.DESPOTISM,\n          governor: {\n              height: cityElement.getElementsByTagName('height')[0].textContent || '',\n              birthday: new Date(cityElement.getElementsByTagName('Human')[0]?.getElementsByTagName('birthday')[0]?.textContent || Date.now()), // Значение по умолчанию на текущую дату\n          },\n      }));\n      \n    \n        \n        setCities(fetchedCities);\n    } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n    }\n};\n\n  useEffect(() => {  \n    fetchCities();\n}, [page, rowsPerPage]);\n\n  return (\n    <div>\n      <Input text='ID' value={inputValue} onInputChange={handleInputChange} />\n      <GetCityButton inputValue={inputValue} onCityUpdate={handleCityUpdate}/>\n      <Stack direction=\"row\" spacing={2}>\n        <Button variant=\"outlined\" onClick={handleButtonClick}>Удалить город</Button>\n      </Stack>\n      <Stack direction=\"row\" spacing={2}>\n        <Button variant=\"outlined\" onClick={() => {\n                                            setModalActive(true);\n                                            setName(cities[Number(inputValue)].name);\n                                            setArea(cities[Number(inputValue)].area);\n                                            setX(cities[Number(inputValue)].coordinates.x);\n                                            setY(cities[Number(inputValue)].coordinates.y);\n\n                                        }}>Редактировать город</Button>\n      </Stack>\n        <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n        <TableContainer sx={{ maxHeight: 440 }}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {cities\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((city) => {\n                      return (\n                          <TableRow hover role=\"checkbox\" tabIndex={-1} key={city.id}>\n                              {columns.map((column) => {\n                                  const value = city[column.id];\n                                  return (\n                                      <TableCell key={column.id} align={column.align}>\n                                          {formatValue(value)}\n                                      </TableCell>\n                                  );\n                              })}\n                          </TableRow>\n                      );\n                  })}\n          </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[1, 2, 3]}\n          component=\"div\"\n          count={cities.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n      { <Modal active={modalActive} setActive={setModalActive}>\n        <div>\n            <List>\n              <ListItem>\n                <ListItemButton>\n                  <Input text='Name' value={name} onInputChange={handleInputChange} />\n                  <Input text='Area' value={area} onInputChange={handleInputChange} />\n                  <Input text='X' value={x} onInputChange={handleInputChange} />\n                  <Input text='Y' value={y} onInputChange={handleInputChange} />\n                </ListItemButton>\n              </ListItem>\n            </List>\n            <List>\n              <ListItem>\n                <ListItemButton>\n                  <Input text='Population' value={population} onInputChange={handleInputChange} />\n                  <Input text='Meters Above Sea Level' value={metersAboveSeaLevel} onInputChange={handleInputChange} />\n                  <Input text='Governor Birthday' value={birthday} onInputChange={handleInputChange} />\n                  <Input text='Governor Height' value={height} onInputChange={handleInputChange} />\n                </ListItemButton>\n              </ListItem>\n            </List>\n        </div>\n    </Modal>}\n    </div>\n    \n    \n  );\n}\nexport default TableCity;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}